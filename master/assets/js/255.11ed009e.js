(window.webpackJsonp=window.webpackJsonp||[]).push([[255],{829:function(e,t,a){"use strict";a.r(t);var s=a(1),n=Object(s.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"configuration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#configuration"}},[e._v("#")]),e._v(" Configuration")]),e._v(" "),a("p",[e._v("Here we describe configuration options around mempool.\nFor the purposes of this document, they are described\nin a toml file, but some of them can also be passed in as\nenvironmental variables.")]),e._v(" "),a("p",[e._v("Config:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"toml",base64:"W21lbXBvb2xdCgojIFNldCB0cnVlIHRvIGJyb2FkY2FzdCB0cmFuc2FjdGlvbnMgaW4gdGhlIG1lbXBvb2wgdG8gb3RoZXIgbm9kZXMKYnJvYWRjYXN0ID0gdHJ1ZQoKIyBNYXhpbXVtIG51bWJlciBvZiB0cmFuc2FjdGlvbnMgaW4gdGhlIG1lbXBvb2wKc2l6ZSA9IDUwMDAKCiMgTGltaXQgdGhlIHRvdGFsIHNpemUgb2YgYWxsIHR4cyBpbiB0aGUgbWVtcG9vbC4KIyBUaGlzIG9ubHkgYWNjb3VudHMgZm9yIHJhdyB0cmFuc2FjdGlvbnMgKGUuZy4gZ2l2ZW4gMU1CIHRyYW5zYWN0aW9ucyBhbmQKIyBtYXgtdHhzLWJ5dGVzPTVNQiwgbWVtcG9vbCB3aWxsIG9ubHkgYWNjZXB0IDUgdHJhbnNhY3Rpb25zKS4KbWF4LXR4cy1ieXRlcyA9IDEwNzM3NDE4MjQKCiMgU2l6ZSBvZiB0aGUgY2FjaGUgKHVzZWQgdG8gZmlsdGVyIHRyYW5zYWN0aW9ucyB3ZSBzYXcgZWFybGllcikgaW4gdHJhbnNhY3Rpb25zCmNhY2hlLXNpemUgPSAxMDAwMAoKIyBEbyBub3QgcmVtb3ZlIGludmFsaWQgdHJhbnNhY3Rpb25zIGZyb20gdGhlIGNhY2hlIChkZWZhdWx0OiBmYWxzZSkKIyBTZXQgdG8gdHJ1ZSBpZiBpdCdzIG5vdCBwb3NzaWJsZSBmb3IgYW55IGludmFsaWQgdHJhbnNhY3Rpb24gdG8gYmVjb21lIHZhbGlkCiMgYWdhaW4gaW4gdGhlIGZ1dHVyZS4Ka2VlcC1pbnZhbGlkLXR4cy1pbi1jYWNoZSA9IGZhbHNlCgojIE1heGltdW0gc2l6ZSBvZiBhIHNpbmdsZSB0cmFuc2FjdGlvbi4KIyBOT1RFOiB0aGUgbWF4IHNpemUgb2YgYSB0eCB0cmFuc21pdHRlZCBvdmVyIHRoZSBuZXR3b3JrIGlzIHttYXgtdHgtYnl0ZXN9LgptYXgtdHgtYnl0ZXMgPSAxMDQ4NTc2CgojIE1heGltdW0gc2l6ZSBvZiBhIGJhdGNoIG9mIHRyYW5zYWN0aW9ucyB0byBzZW5kIHRvIGEgcGVlcgojIEluY2x1ZGluZyBzcGFjZSBuZWVkZWQgYnkgZW5jb2RpbmcgKG9uZSB2YXJpbnQgcGVyIHRyYW5zYWN0aW9uKS4KIyBYWFg6IFVudXNlZCBkdWUgdG8gaHR0cHM6Ly9naXRodWIuY29tL3RlbmRlcm1pbnQvdGVuZGVybWludC9pc3N1ZXMvNTc5NgptYXgtYmF0Y2gtYnl0ZXMgPSAwCg=="}}),e._v(" "),a("h2",{attrs:{id:"broadcast"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#broadcast"}},[e._v("#")]),e._v(" Broadcast")]),e._v(" "),a("p",[e._v("Determines whether this node gossips any valid transactions\nthat arrive in mempool. Default is to gossip anything that\npasses checktx. If this is disabled, transactions are not\ngossiped, but instead stored locally and added to the next\nblock this node is the proposer.")]),e._v(" "),a("h2",{attrs:{id:"waldir"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#waldir"}},[e._v("#")]),e._v(" WalDir")]),e._v(" "),a("p",[e._v("This defines the directory where mempool writes the write-ahead\nlogs. These files can be used to reload unbroadcasted\ntransactions if the node crashes.")]),e._v(" "),a("p",[e._v("If the directory passed in is an absolute path, the wal file is\ncreated there. If the directory is a relative path, the path is\nappended to home directory of the tendermint process to\ngenerate an absolute path to the wal directory\n(default "),a("code",[e._v("$HOME/.tendermint")]),e._v(" or set via "),a("code",[e._v("TM_HOME")]),e._v(" or "),a("code",[e._v("--home")]),e._v(")")]),e._v(" "),a("h2",{attrs:{id:"size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#size"}},[e._v("#")]),e._v(" Size")]),e._v(" "),a("p",[e._v("Size defines the total amount of transactions stored in the mempool. Default is "),a("code",[e._v("5_000")]),e._v(" but can be adjusted to any number you would like. The higher the size the more strain on the node.")]),e._v(" "),a("h2",{attrs:{id:"max-transactions-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-transactions-bytes"}},[e._v("#")]),e._v(" Max Transactions Bytes")]),e._v(" "),a("p",[e._v("Max transactions bytes defines the total size of all the transactions in the mempool. Default is 1 GB.")]),e._v(" "),a("h2",{attrs:{id:"cache-size"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#cache-size"}},[e._v("#")]),e._v(" Cache size")]),e._v(" "),a("p",[e._v("Cache size determines the size of the cache holding transactions we have already seen. The cache exists to avoid running "),a("code",[e._v("checktx")]),e._v(" each time we receive a transaction.")]),e._v(" "),a("h2",{attrs:{id:"keep-invalid-transactions-in-cache"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#keep-invalid-transactions-in-cache"}},[e._v("#")]),e._v(" Keep Invalid Transactions In Cache")]),e._v(" "),a("p",[e._v("Keep invalid transactions in cache determines wether a transaction in the cache, which is invalid, should be evicted. An invalid transaction here may mean that the transaction may rely on a different tx that has not been included in a block.")]),e._v(" "),a("h2",{attrs:{id:"max-transaction-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-transaction-bytes"}},[e._v("#")]),e._v(" Max Transaction Bytes")]),e._v(" "),a("p",[e._v("Max transaction bytes defines the max size a transaction can be for your node. If you would like your node to only keep track of smaller transactions this field would need to be changed. Default is 1MB.")]),e._v(" "),a("h2",{attrs:{id:"max-batch-bytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#max-batch-bytes"}},[e._v("#")]),e._v(" Max Batch Bytes")]),e._v(" "),a("p",[e._v("Max batch bytes defines the amount of bytes the node will send to a peer. Default is 0.")]),e._v(" "),a("blockquote",[a("p",[e._v("Note: Unused due to https://github.com/tendermint/tendermint/issues/5796")])])],1)}),[],!1,null,null,null);t.default=n.exports}}]);