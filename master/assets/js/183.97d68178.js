(window.webpackJsonp=window.webpackJsonp||[]).push([[183],{757:function(e,t,a){"use strict";a.r(t);var n=a(1),o=Object(n.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"applications"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#applications"}},[e._v("#")]),e._v(" Applications")]),e._v(" "),a("p",[e._v("Please ensure you've first read the spec for "),a("RouterLink",{attrs:{to:"/spec/abci/abci.html"}},[e._v("ABCI Methods and Types")])],1),e._v(" "),a("p",[e._v("Here we cover the following components of ABCI applications:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"#connection-state"}},[e._v("Connection State")]),e._v(" - the interplay between ABCI connections and application state\nand the differences between "),a("code",[e._v("CheckTx")]),e._v(" and "),a("code",[e._v("DeliverTx")]),e._v(".")]),e._v(" "),a("li",[a("a",{attrs:{href:"#transaction-results"}},[e._v("Transaction Results")]),e._v(" - rules around transaction\nresults and validity")]),e._v(" "),a("li",[a("a",{attrs:{href:"#updating-the-validator-set"}},[e._v("Validator Set Updates")]),e._v(" - how validator sets are\nchanged during "),a("code",[e._v("InitChain")]),e._v(" and "),a("code",[e._v("EndBlock")])]),e._v(" "),a("li",[a("a",{attrs:{href:"#query"}},[e._v("Query")]),e._v(" - standards for using the "),a("code",[e._v("Query")]),e._v(" method and proofs about the\napplication state")]),e._v(" "),a("li",[a("a",{attrs:{href:"#crash-recovery"}},[e._v("Crash Recovery")]),e._v(" - handshake protocol to synchronize\nTendermint and the application on startup.")]),e._v(" "),a("li",[a("a",{attrs:{href:"#state-sync"}},[e._v("State Sync")]),e._v(" - rapid bootstrapping of new nodes by restoring state machine snapshots")])]),e._v(" "),a("h2",{attrs:{id:"connection-state"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#connection-state"}},[e._v("#")]),e._v(" Connection State")]),e._v(" "),a("p",[e._v("Since Tendermint maintains four concurrent ABCI connections, it is typical\nfor an application to maintain a distinct state for each, and for the states to\nbe synchronized during "),a("code",[e._v("Commit")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"concurrency"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#concurrency"}},[e._v("#")]),e._v(" Concurrency")]),e._v(" "),a("p",[e._v("In principle, each of the four ABCI connections operate concurrently with one\nanother. This means applications need to ensure access to state is\nthread safe. In practice, both the\n"),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/v0.34.4/abci/client/local_client.go#L18",target:"_blank",rel:"noopener noreferrer"}},[e._v("default in-process ABCI client"),a("OutboundLink")],1),e._v("\nand the\n"),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/blob/v0.34.4/abci/server/socket_server.go#L32",target:"_blank",rel:"noopener noreferrer"}},[e._v("default Go ABCI\nserver"),a("OutboundLink")],1),e._v("\nuse global locks across all connections, so they are not\nconcurrent at all. This means if your app is written in Go, and compiled in-process with Tendermint\nusing the default "),a("code",[e._v("NewLocalClient")]),e._v(", or run out-of-process using the default "),a("code",[e._v("SocketServer")]),e._v(",\nABCI messages from all connections will be linearizable (received one at a\ntime).")]),e._v(" "),a("p",[e._v("The existence of this global mutex means Go application developers can get\nthread safety for application state by routing "),a("em",[e._v("all")]),e._v(" reads and writes through the ABCI\nsystem. Thus it may be "),a("em",[e._v("unsafe")]),e._v(" to expose application state directly to an RPC\ninterface, and unless explicit measures are taken, all queries should be routed through the ABCI Query method.")]),e._v(" "),a("h3",{attrs:{id:"beginblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#beginblock"}},[e._v("#")]),e._v(" BeginBlock")]),e._v(" "),a("p",[e._v("The BeginBlock request can be used to run some code at the beginning of\nevery block. It also allows Tendermint to send the current block hash\nand header to the application, before it sends any of the transactions.")]),e._v(" "),a("p",[e._v("The app should remember the latest height and header (ie. from which it\nhas run a successful Commit) so that it can tell Tendermint where to\npick up from when it restarts. See information on the Handshake, below.")]),e._v(" "),a("h3",{attrs:{id:"commit"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[e._v("#")]),e._v(" Commit")]),e._v(" "),a("p",[e._v("Application state should only be persisted to disk during "),a("code",[e._v("Commit")]),e._v(".")]),e._v(" "),a("p",[e._v("Before "),a("code",[e._v("Commit")]),e._v(" is called, Tendermint locks and flushes the mempool so that no new messages will\nbe received on the mempool connection. This provides an opportunity to safely update all four connection\nstates to the latest committed state at once.")]),e._v(" "),a("p",[e._v("When "),a("code",[e._v("Commit")]),e._v(" completes, it unlocks the mempool.")]),e._v(" "),a("p",[e._v("WARNING: if the ABCI app logic processing the "),a("code",[e._v("Commit")]),e._v(" message sends a\n"),a("code",[e._v("/broadcast_tx_sync")]),e._v(" or "),a("code",[e._v("/broadcast_tx_commit")]),e._v(" and waits for the response\nbefore proceeding, it will deadlock. Executing those "),a("code",[e._v("broadcast_tx")]),e._v(" calls\ninvolves acquiring a lock that is held during the "),a("code",[e._v("Commit")]),e._v(" call, so it's not\npossible. If you make the call to the "),a("code",[e._v("broadcast_tx")]),e._v(" endpoints concurrently,\nthat's no problem, it just can't be part of the sequential logic of the\n"),a("code",[e._v("Commit")]),e._v(" function.")]),e._v(" "),a("h3",{attrs:{id:"consensus-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consensus-connection"}},[e._v("#")]),e._v(" Consensus Connection")]),e._v(" "),a("p",[e._v("The Consensus Connection should maintain a "),a("code",[e._v("DeliverTxState")]),e._v(" - the working state\nfor block execution. It should be updated by the calls to "),a("code",[e._v("BeginBlock")]),e._v(", "),a("code",[e._v("DeliverTx")]),e._v(",\nand "),a("code",[e._v("EndBlock")]),e._v(' during block execution and committed to disk as the "latest\ncommitted state" during '),a("code",[e._v("Commit")]),e._v(".")]),e._v(" "),a("p",[e._v("Updates made to the "),a("code",[e._v("DeliverTxState")]),e._v(" by each method call must be readable by each subsequent method -\nie. the updates are linearizable.")]),e._v(" "),a("h3",{attrs:{id:"mempool-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mempool-connection"}},[e._v("#")]),e._v(" Mempool Connection")]),e._v(" "),a("p",[e._v("The mempool Connection should maintain a "),a("code",[e._v("CheckTxState")]),e._v("\nto sequentially process pending transactions in the mempool that have\nnot yet been committed. It should be initialized to the latest committed state\nat the end of every "),a("code",[e._v("Commit")]),e._v(".")]),e._v(" "),a("p",[e._v("Before calling "),a("code",[e._v("Commit")]),e._v(", Tendermint will lock and flush the mempool connection,\nensuring that all existing CheckTx are responded to and no new ones can begin.\nThe "),a("code",[e._v("CheckTxState")]),e._v(" may be updated concurrently with the "),a("code",[e._v("DeliverTxState")]),e._v(", as\nmessages may be sent concurrently on the Consensus and Mempool connections.")]),e._v(" "),a("p",[e._v("After "),a("code",[e._v("Commit")]),e._v(", while still holding the mempool lock, CheckTx is run again on all transactions that remain in the\nnode's local mempool after filtering those included in the block.\nAn additional "),a("code",[e._v("Type")]),e._v(" parameter is made available to the CheckTx function that\nindicates whether an incoming transaction is new ("),a("code",[e._v("CheckTxType_New")]),e._v("), or a\nrecheck ("),a("code",[e._v("CheckTxType_Recheck")]),e._v(").")]),e._v(" "),a("p",[e._v("Finally, after re-checking transactions in the mempool, Tendermint will unlock\nthe mempool connection. New transactions are once again able to be processed through CheckTx.")]),e._v(" "),a("p",[e._v("Note that CheckTx is just a weak filter to keep invalid transactions out of the block chain.\nCheckTx doesn't have to check everything that affects transaction validity; the\nexpensive things can be skipped.  It's weak because a Byzantine node doesn't\ncare about CheckTx; it can propose a block full of invalid transactions if it wants.")]),e._v(" "),a("h4",{attrs:{id:"replay-protection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#replay-protection"}},[e._v("#")]),e._v(" Replay Protection")]),e._v(" "),a("p",[e._v("To prevent old transactions from being replayed, CheckTx must implement\nreplay protection.")]),e._v(" "),a("p",[e._v("It is possible for old transactions to be sent to the application. So\nit is important CheckTx implements some logic to handle them.")]),e._v(" "),a("h3",{attrs:{id:"query-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-connection"}},[e._v("#")]),e._v(" Query Connection")]),e._v(" "),a("p",[e._v("The Info Connection should maintain a "),a("code",[e._v("QueryState")]),e._v(" for answering queries from the user,\nand for initialization when Tendermint first starts up (both described further\nbelow).\nIt should always contain the latest committed state associated with the\nlatest committed block.")]),e._v(" "),a("p",[a("code",[e._v("QueryState")]),e._v(" should be set to the latest "),a("code",[e._v("DeliverTxState")]),e._v(" at the end of every "),a("code",[e._v("Commit")]),e._v(",\nafter the full block has been processed and the state committed to disk.\nOtherwise it should never be modified.")]),e._v(" "),a("p",[e._v("Tendermint Core currently uses the Query connection to filter peers upon\nconnecting, according to IP address or node ID. For instance,\nreturning non-OK ABCI response to either of the following queries will\ncause Tendermint to not connect to the corresponding peer:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("p2p/filter/addr/<ip addr>")]),e._v(", where "),a("code",[e._v("<ip addr>")]),e._v(" is an IP address.")]),e._v(" "),a("li",[a("code",[e._v("p2p/filter/id/<id>")]),e._v(", where "),a("code",[e._v("<is>")]),e._v(" is the hex-encoded node ID (the hash of\nthe node's p2p pubkey).")])]),e._v(" "),a("p",[e._v("Note: these query formats are subject to change!")]),e._v(" "),a("h3",{attrs:{id:"snapshot-connection"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-connection"}},[e._v("#")]),e._v(" Snapshot Connection")]),e._v(" "),a("p",[e._v("The Snapshot Connection is optional, and is only used to serve state sync snapshots for other nodes\nand/or restore state sync snapshots to a local node being bootstrapped.")]),e._v(" "),a("p",[e._v("For more information, see "),a("a",{attrs:{href:"#state-sync"}},[e._v("the state sync section of this document")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"transaction-results"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transaction-results"}},[e._v("#")]),e._v(" Transaction Results")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("Info")]),e._v(" and "),a("code",[e._v("Log")]),e._v(" fields are non-deterministic values for debugging/convenience purposes\nthat are otherwise ignored.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("Data")]),e._v(" field must be strictly deterministic, but can be arbitrary data.")]),e._v(" "),a("h3",{attrs:{id:"gas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#gas"}},[e._v("#")]),e._v(" Gas")]),e._v(" "),a("p",[e._v("Ethereum introduced the notion of "),a("code",[e._v("gas")]),e._v(" as an abstract representation of the\ncost of resources used by nodes when processing transactions. Every operation in the\nEthereum Virtual Machine uses some amount of gas, and gas can be accepted at a market-variable price.\nUsers propose a maximum amount of gas for their transaction; if the tx uses less, they get\nthe difference credited back. Tendermint adopts a similar abstraction,\nthough uses it only optionally and weakly, allowing applications to define\ntheir own sense of the cost of execution.")]),e._v(" "),a("p",[e._v("In Tendermint, the\n"),a("a",{attrs:{href:"../../proto/tendermint/types/params.proto"}},[e._v("ConsensusParams.Block.MaxGas")]),e._v("\nlimits the amount of "),a("code",[e._v("gas")]),e._v(" that can be used in a block.  The default value is\n"),a("code",[e._v("-1")]),e._v(", meaning no limit, or that the concept of gas is meaningless.")]),e._v(" "),a("p",[e._v("Responses contain a "),a("code",[e._v("GasWanted")]),e._v(" and "),a("code",[e._v("GasUsed")]),e._v(" field. The former is the maximum\namount of gas the sender of a tx is willing to use, and the later is how much it actually\nused. Applications should enforce that "),a("code",[e._v("GasUsed <= GasWanted")]),e._v(" - ie. tx execution\nshould halt before it can use more resources than it requested.")]),e._v(" "),a("p",[e._v("When "),a("code",[e._v("MaxGas > -1")]),e._v(", Tendermint enforces the following rules:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("GasWanted <= MaxGas")]),e._v(" for all txs in the mempool")]),e._v(" "),a("li",[a("code",[e._v("(sum of GasWanted in a block) <= MaxGas")]),e._v(" when proposing a block")])]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("MaxGas == -1")]),e._v(", no rules about gas are enforced.")]),e._v(" "),a("p",[e._v("Note that Tendermint does not currently enforce anything about Gas in the consensus, only the mempool.\nThis means it does not guarantee that committed blocks satisfy these rules!\nIt is the application's responsibility to return non-zero response codes when gas limits are exceeded.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("GasUsed")]),e._v(" field is ignored completely by Tendermint. That said, applications should enforce:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("GasUsed <= GasWanted")]),e._v(" for any given transaction")]),e._v(" "),a("li",[a("code",[e._v("(sum of GasUsed in a block) <= MaxGas")]),e._v(" for every block")])]),e._v(" "),a("p",[e._v("In the future, we intend to add a "),a("code",[e._v("Priority")]),e._v(" field to the responses that can be\nused to explicitly prioritize txs in the mempool for inclusion in a block\nproposal. See "),a("a",{attrs:{href:"https://github.com/tendermint/tendermint/issues/1861",target:"_blank",rel:"noopener noreferrer"}},[e._v("#1861"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"checktx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#checktx"}},[e._v("#")]),e._v(" CheckTx")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("Code != 0")]),e._v(", it will be rejected from the mempool and hence\nnot broadcasted to other peers and not included in a proposal block.")]),e._v(" "),a("p",[a("code",[e._v("Data")]),e._v(" contains the result of the CheckTx transaction execution, if any. It is\nsemantically meaningless to Tendermint.")]),e._v(" "),a("h3",{attrs:{id:"delivertx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#delivertx"}},[e._v("#")]),e._v(" DeliverTx")]),e._v(" "),a("p",[e._v("DeliverTx is the workhorse of the blockchain. Tendermint sends the\nDeliverTx requests asynchronously but in order, and relies on the\nunderlying socket protocol (ie. TCP) to ensure they are received by the\napp in order. They have already been ordered in the global consensus by\nthe Tendermint protocol.")]),e._v(" "),a("p",[e._v("If DeliverTx returns "),a("code",[e._v("Code != 0")]),e._v(", the transaction will be considered invalid,\nthough it is still included in the block.")]),e._v(" "),a("p",[e._v("DeliverTx also returns a "),a("a",{attrs:{href:"../../proto/tendermint/abci/types.proto#L189-L191"}},[e._v("Code, Data, and Log")]),e._v(".")]),e._v(" "),a("p",[a("code",[e._v("Data")]),e._v(" contains the result of the CheckTx transaction execution, if any. It is\nsemantically meaningless to Tendermint.")]),e._v(" "),a("p",[e._v("Both the "),a("code",[e._v("Code")]),e._v(" and "),a("code",[e._v("Data")]),e._v(" are included in a structure that is hashed into the\n"),a("code",[e._v("LastResultsHash")]),e._v(" of the next block header.")]),e._v(" "),a("p",[a("code",[e._v("Events")]),e._v(" include any events for the execution, which Tendermint will use to index\nthe transaction by. This allows transactions to be queried according to what\nevents took place during their execution.")]),e._v(" "),a("h2",{attrs:{id:"updating-the-validator-set"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updating-the-validator-set"}},[e._v("#")]),e._v(" Updating the Validator Set")]),e._v(" "),a("p",[e._v("The application may set the validator set during InitChain, and may update it during\nEndBlock.")]),e._v(" "),a("p",[e._v("Note that the maximum total power of the validator set is bounded by\n"),a("code",[e._v("MaxTotalVotingPower = MaxInt64 / 8")]),e._v(". Applications are responsible for ensuring\nthey do not make changes to the validator set that cause it to exceed this\nlimit.")]),e._v(" "),a("p",[e._v("Additionally, applications must ensure that a single set of updates does not contain any duplicates -\na given public key can only appear once within a given update. If an update includes\nduplicates, the block execution will fail irrecoverably.")]),e._v(" "),a("h3",{attrs:{id:"initchain"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initchain"}},[e._v("#")]),e._v(" InitChain")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("InitChain")]),e._v(" method can return a list of validators.\nIf the list is empty, Tendermint will use the validators loaded in the genesis\nfile.\nIf the list returned by "),a("code",[e._v("InitChain")]),e._v(" is not empty, Tendermint will use its contents as the validator set.\nThis way the application can set the initial validator set for the\nblockchain.")]),e._v(" "),a("h3",{attrs:{id:"endblock"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endblock"}},[e._v("#")]),e._v(" EndBlock")]),e._v(" "),a("p",[e._v("Updates to the Tendermint validator set can be made by returning\n"),a("code",[e._v("ValidatorUpdate")]),e._v(" objects in the "),a("code",[e._v("ResponseEndBlock")]),e._v(":")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"bWVzc2FnZSBWYWxpZGF0b3JVcGRhdGUgewogIHRlbmRlcm1pbnQuY3J5cHRvLmtleXMuUHVibGljS2V5IHB1Yl9rZXkKICBpbnQ2NCBwb3dlcgp9CgptZXNzYWdlIFB1YmxpY0tleSB7CiAgb25lb2YgewogICAgZWQyNTUxOSBieXRlcyA9IDE7CiAgfQo="}}),e._v(" "),a("p",[e._v("The "),a("code",[e._v("pub_key")]),e._v(" currently supports only one type:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v('type = "ed25519"')])])]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("power")]),e._v(" is the new voting power for the validator, with the\nfollowing rules:")]),e._v(" "),a("ul",[a("li",[e._v("power must be non-negative")]),e._v(" "),a("li",[e._v("if power is 0, the validator must already exist, and will be removed from the\nvalidator set")]),e._v(" "),a("li",[e._v("if power is non-0:\n"),a("ul",[a("li",[e._v("if the validator does not already exist, it will be added to the validator\nset with the given power")]),e._v(" "),a("li",[e._v("if the validator does already exist, its power will be adjusted to the given power")])])]),e._v(" "),a("li",[e._v("the total power of the new validator set must not exceed MaxTotalVotingPower")])]),e._v(" "),a("p",[e._v("Note the updates returned in block "),a("code",[e._v("H")]),e._v(" will only take effect at block "),a("code",[e._v("H+2")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"consensus-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#consensus-parameters"}},[e._v("#")]),e._v(" Consensus Parameters")]),e._v(" "),a("p",[e._v("ConsensusParams enforce certain limits in the blockchain, like the maximum size\nof blocks, amount of gas used in a block, and the maximum acceptable age of\nevidence. They can be set in InitChain and updated in EndBlock.")]),e._v(" "),a("h3",{attrs:{id:"blockparams-maxbytes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockparams-maxbytes"}},[e._v("#")]),e._v(" BlockParams.MaxBytes")]),e._v(" "),a("p",[e._v("The maximum size of a complete Protobuf encoded block.\nThis is enforced by Tendermint consensus.")]),e._v(" "),a("p",[e._v("This implies a maximum transaction size that is this MaxBytes, less the expected size of\nthe header, the validator set, and any included evidence in the block.")]),e._v(" "),a("p",[e._v("Must have "),a("code",[e._v("0 < MaxBytes < 100 MB")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"blockparams-maxgas"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockparams-maxgas"}},[e._v("#")]),e._v(" BlockParams.MaxGas")]),e._v(" "),a("p",[e._v("The maximum of the sum of "),a("code",[e._v("GasWanted")]),e._v(" that will be allowed in a proposed block.\nThis is "),a("em",[e._v("not")]),e._v(" enforced by Tendermint consensus.\nIt is left to the app to enforce (ie. if txs are included past the\nlimit, they should return non-zero codes). It is used by Tendermint to limit the\ntxs included in a proposed block.")]),e._v(" "),a("p",[e._v("Must have "),a("code",[e._v("MaxGas >= -1")]),e._v(".\nIf "),a("code",[e._v("MaxGas == -1")]),e._v(", no limit is enforced.")]),e._v(" "),a("h3",{attrs:{id:"blockparams-rechecktx"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#blockparams-rechecktx"}},[e._v("#")]),e._v(" BlockParams.RecheckTx")]),e._v(" "),a("p",[e._v("This indicates whether all nodes in the network should perform a "),a("code",[e._v("CheckTx")]),e._v(" on all\ntransactions remaining in the mempool directly "),a("em",[e._v("after")]),e._v(" the execution of every block,\ni.e. whenever a new application state is created. This is often useful for garbage\ncollection.")]),e._v(" "),a("p",[e._v("The change will come into effect immediately after "),a("code",[e._v("FinalizeBlock")]),e._v(" has been\ncalled.")]),e._v(" "),a("p",[e._v("This was previously a local mempool config parameter.")]),e._v(" "),a("h3",{attrs:{id:"evidenceparams-maxageduration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evidenceparams-maxageduration"}},[e._v("#")]),e._v(" EvidenceParams.MaxAgeDuration")]),e._v(" "),a("p",[e._v("This is the maximum age of evidence in time units.\nThis is enforced by Tendermint consensus.")]),e._v(" "),a("p",[e._v("If a block includes evidence older than this (AND the evidence was created more\nthan "),a("code",[e._v("MaxAgeNumBlocks")]),e._v(" ago), the block will be rejected (validators won't vote\nfor it).")]),e._v(" "),a("p",[e._v("Must have "),a("code",[e._v("MaxAgeDuration > 0")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"evidenceparams-maxagenumblocks"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evidenceparams-maxagenumblocks"}},[e._v("#")]),e._v(" EvidenceParams.MaxAgeNumBlocks")]),e._v(" "),a("p",[e._v("This is the maximum age of evidence in blocks.\nThis is enforced by Tendermint consensus.")]),e._v(" "),a("p",[e._v("If a block includes evidence older than this (AND the evidence was created more\nthan "),a("code",[e._v("MaxAgeDuration")]),e._v(" ago), the block will be rejected (validators won't vote\nfor it).")]),e._v(" "),a("p",[e._v("Must have "),a("code",[e._v("MaxAgeNumBlocks > 0")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"evidenceparams-maxnum"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#evidenceparams-maxnum"}},[e._v("#")]),e._v(" EvidenceParams.MaxNum")]),e._v(" "),a("p",[e._v("This is the maximum number of evidence that can be committed to a single block.")]),e._v(" "),a("p",[e._v("The product of this and the "),a("code",[e._v("MaxEvidenceBytes")]),e._v(" must not exceed the size of\na block minus it's overhead ( ~ "),a("code",[e._v("MaxBytes")]),e._v(").")]),e._v(" "),a("p",[e._v("Must have "),a("code",[e._v("MaxNum > 0")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"synchronyparams-precision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronyparams-precision"}},[e._v("#")]),e._v(" SynchronyParams.Precision")]),e._v(" "),a("p",[a("code",[e._v("SynchronyParams.Precision")]),e._v(" is a parameter of the Proposer-Based Timestamps algorithm.\nthat configures the acceptable upper-bound of clock drift among\nall of the nodes on a Tendermint network. Any two nodes on a Tendermint network\nare expected to have clocks that differ by at most "),a("code",[e._v("Precision")]),e._v(".")]),e._v(" "),a("h3",{attrs:{id:"synchronyparams-messagedelay"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#synchronyparams-messagedelay"}},[e._v("#")]),e._v(" SynchronyParams.MessageDelay")]),e._v(" "),a("p",[a("code",[e._v("SynchronyParams.MessageDelay")]),e._v(" is a parameter of the Proposer-Based Timestamps\nalgorithm that configures the acceptable upper-bound for transmitting a "),a("code",[e._v("Proposal")]),e._v("\nmessage from the proposer to all of the validators on the network.")]),e._v(" "),a("h3",{attrs:{id:"updates"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#updates"}},[e._v("#")]),e._v(" Updates")]),e._v(" "),a("p",[e._v("The application may set the ConsensusParams during InitChain, and update them during\nEndBlock. If the ConsensusParams is empty, it will be ignored. Each field\nthat is not empty will be applied in full. For instance, if updating the\nBlock.MaxBytes, applications must also set the other Block fields (like\nBlock.MaxGas), even if they are unchanged, as they will otherwise cause the\nvalue to be updated to 0.")]),e._v(" "),a("h4",{attrs:{id:"initchain-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#initchain-2"}},[e._v("#")]),e._v(" InitChain")]),e._v(" "),a("p",[e._v("ResponseInitChain includes a ConsensusParams.\nIf ConsensusParams is nil, Tendermint will use the params loaded in the genesis\nfile. If ConsensusParams is not nil, Tendermint will use it.\nThis way the application can determine the initial consensus params for the\nblockchain.")]),e._v(" "),a("h4",{attrs:{id:"endblock-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#endblock-2"}},[e._v("#")]),e._v(" EndBlock")]),e._v(" "),a("p",[e._v("ResponseEndBlock includes a ConsensusParams.\nIf ConsensusParams nil, Tendermint will do nothing.\nIf ConsensusParam is not nil, Tendermint will use it.\nThis way the application can update the consensus params over time.")]),e._v(" "),a("p",[e._v("Note the updates returned in block "),a("code",[e._v("H")]),e._v(" will take effect right away for block\n"),a("code",[e._v("H+1")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"query"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[e._v("#")]),e._v(" Query")]),e._v(" "),a("p",[e._v("Query is a generic method with lots of flexibility to enable diverse sets\nof queries on application state. Tendermint makes use of Query to filter new peers\nbased on ID and IP, and exposes Query to the user over RPC.")]),e._v(" "),a("p",[e._v("Note that calls to Query are not replicated across nodes, but rather query the\nlocal node's state - hence they may return stale reads. For reads that require\nconsensus, use a transaction.")]),e._v(" "),a("p",[e._v("The most important use of Query is to return Merkle proofs of the application state at some height\nthat can be used for efficient application-specific light-clients.")]),e._v(" "),a("p",[e._v("Note Tendermint has technically no requirements from the Query\nmessage for normal operation - that is, the ABCI app developer need not implement\nQuery functionality if they do not wish too.")]),e._v(" "),a("h3",{attrs:{id:"query-proofs"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#query-proofs"}},[e._v("#")]),e._v(" Query Proofs")]),e._v(" "),a("p",[e._v("The Tendermint block header includes a number of hashes, each providing an\nanchor for some type of proof about the blockchain. The "),a("code",[e._v("ValidatorsHash")]),e._v(" enables\nquick verification of the validator set, the "),a("code",[e._v("DataHash")]),e._v(" gives quick\nverification of the transactions included in the block, etc.")]),e._v(" "),a("p",[e._v("The "),a("code",[e._v("AppHash")]),e._v(" is unique in that it is application specific, and allows for\napplication-specific Merkle proofs about the state of the application.\nWhile some applications keep all relevant state in the transactions themselves\n(like Bitcoin and its UTXOs), others maintain a separated state that is\ncomputed deterministically "),a("em",[e._v("from")]),e._v(" transactions, but is not contained directly in\nthe transactions themselves (like Ethereum contracts and accounts).\nFor such applications, the "),a("code",[e._v("AppHash")]),e._v(" provides a much more efficient way to verify light-client proofs.")]),e._v(" "),a("p",[e._v("ABCI applications can take advantage of more efficient light-client proofs for\ntheir state as follows:")]),e._v(" "),a("ul",[a("li",[e._v("return the Merkle root of the deterministic application state in\n"),a("code",[e._v("ResponseCommit.Data")]),e._v(". This Merkle root will be included as the "),a("code",[e._v("AppHash")]),e._v(" in the next block.")]),e._v(" "),a("li",[e._v("return efficient Merkle proofs about that application state in "),a("code",[e._v("ResponseQuery.Proof")]),e._v("\nthat can be verified using the "),a("code",[e._v("AppHash")]),e._v(" of the corresponding block.")])]),e._v(" "),a("p",[e._v("For instance, this allows an application's light-client to verify proofs of\nabsence in the application state, something which is much less efficient to do using the block hash.")]),e._v(" "),a("p",[e._v('Some applications (eg. Ethereum, Cosmos-SDK) have multiple "levels" of Merkle trees,\nwhere the leaves of one tree are the root hashes of others. To support this, and\nthe general variability in Merkle proofs, the '),a("code",[e._v("ResponseQuery.Proof")]),e._v(" has some minimal structure:")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"bWVzc2FnZSBQcm9vZk9wcyB7CiAgcmVwZWF0ZWQgUHJvb2ZPcCBvcHMKfQoKbWVzc2FnZSBQcm9vZk9wIHsKICBzdHJpbmcgdHlwZSA9IDE7CiAgYnl0ZXMga2V5ID0gMjsKICBieXRlcyBkYXRhID0gMzsKfQo="}}),e._v(" "),a("p",[e._v("Each "),a("code",[e._v("ProofOp")]),e._v(" contains a proof for a single key in a single Merkle tree, of the specified "),a("code",[e._v("type")]),e._v(".\nThis allows ABCI to support many different kinds of Merkle trees, encoding\nformats, and proofs (eg. of presence and absence) just by varying the "),a("code",[e._v("type")]),e._v(".\nThe "),a("code",[e._v("data")]),e._v(" contains the actual encoded proof, encoded according to the "),a("code",[e._v("type")]),e._v(".\nWhen verifying the full proof, the root hash for one ProofOp is the value being\nverified for the next ProofOp in the list. The root hash of the final ProofOp in\nthe list should match the "),a("code",[e._v("AppHash")]),e._v(" being verified against.")]),e._v(" "),a("h3",{attrs:{id:"peer-filtering"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#peer-filtering"}},[e._v("#")]),e._v(" Peer Filtering")]),e._v(" "),a("p",[e._v("When Tendermint connects to a peer, it sends two queries to the ABCI application\nusing the following paths, with no additional data:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("/p2p/filter/addr/<IP:PORT>")]),e._v(", where "),a("code",[e._v("<IP:PORT>")]),e._v(" denote the IP address and\nthe port of the connection")]),e._v(" "),a("li",[a("code",[e._v("p2p/filter/id/<ID>")]),e._v(", where "),a("code",[e._v("<ID>")]),e._v(" is the peer node ID (ie. the\npubkey.Address() for the peer's PubKey)")])]),e._v(" "),a("p",[e._v("If either of these queries return a non-zero ABCI code, Tendermint will refuse\nto connect to the peer.")]),e._v(" "),a("h3",{attrs:{id:"paths"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#paths"}},[e._v("#")]),e._v(" Paths")]),e._v(" "),a("p",[e._v("Queries are directed at paths, and may optionally include additional data.")]),e._v(" "),a("p",[e._v("The expectation is for there to be some number of high level paths\ndifferentiating concerns, like "),a("code",[e._v("/p2p")]),e._v(", "),a("code",[e._v("/store")]),e._v(", and "),a("code",[e._v("/app")]),e._v(". Currently,\nTendermint only uses "),a("code",[e._v("/p2p")]),e._v(", for filtering peers. For more advanced use, see the\nimplementation of\n"),a("a",{attrs:{href:"https://github.com/cosmos/cosmos-sdk/blob/v0.23.1/baseapp/baseapp.go#L333",target:"_blank",rel:"noopener noreferrer"}},[e._v("Query in the Cosmos-SDK"),a("OutboundLink")],1),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"crash-recovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#crash-recovery"}},[e._v("#")]),e._v(" Crash Recovery")]),e._v(" "),a("p",[e._v("On startup, Tendermint calls the "),a("code",[e._v("Info")]),e._v(" method on the Info Connection to get the latest\ncommitted state of the app. The app MUST return information consistent with the\nlast block it succesfully completed Commit for.")]),e._v(" "),a("p",[e._v("If the app succesfully committed block H, then "),a("code",[e._v("last_block_height = H")]),e._v(" and "),a("code",[e._v("last_block_app_hash = <hash returned by Commit for block H>")]),e._v(". If the app\nfailed during the Commit of block H, then "),a("code",[e._v("last_block_height = H-1")]),e._v(" and\n"),a("code",[e._v("last_block_app_hash = <hash returned by Commit for block H-1, which is the hash in the header of block H>")]),e._v(".")]),e._v(" "),a("p",[e._v("We now distinguish three heights, and describe how Tendermint syncs itself with\nthe app.")]),e._v(" "),a("tm-code-block",{staticClass:"codeblock",attrs:{language:"md",base64:"c3RvcmVCbG9ja0hlaWdodCA9IGhlaWdodCBvZiB0aGUgbGFzdCBibG9jayBUZW5kZXJtaW50IHNhdyBhIGNvbW1pdCBmb3IKc3RhdGVCbG9ja0hlaWdodCA9IGhlaWdodCBvZiB0aGUgbGFzdCBibG9jayBmb3Igd2hpY2ggVGVuZGVybWludCBjb21wbGV0ZWQgYWxsCiAgICBibG9jayBwcm9jZXNzaW5nIGFuZCBzYXZlZCBhbGwgQUJDSSByZXN1bHRzIHRvIGRpc2sKYXBwQmxvY2tIZWlnaHQgPSBoZWlnaHQgb2YgdGhlIGxhc3QgYmxvY2sgZm9yIHdoaWNoIEFCQ0kgYXBwIHN1Y2Nlc2Z1bGx5CiAgICBjb21wbGV0ZWQgQ29tbWl0Cgo="}}),e._v(" "),a("p",[e._v("Note we always have "),a("code",[e._v("storeBlockHeight >= stateBlockHeight")]),e._v(" and "),a("code",[e._v("storeBlockHeight >= appBlockHeight")]),e._v("\nNote also Tendermint never calls Commit on an ABCI app twice for the same height.")]),e._v(" "),a("p",[e._v("The procedure is as follows.")]),e._v(" "),a("p",[e._v("First, some simple start conditions:")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("appBlockHeight == 0")]),e._v(", then call InitChain.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("storeBlockHeight == 0")]),e._v(", we're done.")]),e._v(" "),a("p",[e._v("Now, some sanity checks:")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("storeBlockHeight < appBlockHeight")]),e._v(", error\nIf "),a("code",[e._v("storeBlockHeight < stateBlockHeight")]),e._v(", panic\nIf "),a("code",[e._v("storeBlockHeight > stateBlockHeight+1")]),e._v(", panic")]),e._v(" "),a("p",[e._v("Now, the meat:")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("storeBlockHeight == stateBlockHeight && appBlockHeight < storeBlockHeight")]),e._v(",\nreplay all blocks in full from "),a("code",[e._v("appBlockHeight")]),e._v(" to "),a("code",[e._v("storeBlockHeight")]),e._v(".\nThis happens if we completed processing the block, but the app forgot its height.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("storeBlockHeight == stateBlockHeight && appBlockHeight == storeBlockHeight")]),e._v(", we're done.\nThis happens if we crashed at an opportune spot.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("storeBlockHeight == stateBlockHeight+1")]),e._v("\nThis happens if we started processing the block but didn't finish.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("appBlockHeight < stateBlockHeight")]),e._v("\nreplay all blocks in full from "),a("code",[e._v("appBlockHeight")]),e._v(" to "),a("code",[e._v("storeBlockHeight-1")]),e._v(",\nand replay the block at "),a("code",[e._v("storeBlockHeight")]),e._v(" using the WAL.\nThis happens if the app forgot the last block it committed.")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("appBlockHeight == stateBlockHeight")]),e._v(",\nreplay the last block (storeBlockHeight) in full.\nThis happens if we crashed before the app finished Commit")]),e._v(" "),a("p",[e._v("If "),a("code",[e._v("appBlockHeight == storeBlockHeight")]),e._v("\nupdate the state using the saved ABCI responses but dont run the block against the real app.\nThis happens if we crashed after the app finished Commit but before Tendermint saved the state.")]),e._v(" "),a("h2",{attrs:{id:"state-sync"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#state-sync"}},[e._v("#")]),e._v(" State Sync")]),e._v(" "),a("p",[e._v("A new node joining the network can simply join consensus at the genesis height and replay all\nhistorical blocks until it is caught up. However, for large chains this can take a significant\namount of time, often on the order of days or weeks.")]),e._v(" "),a("p",[e._v("State sync is an alternative mechanism for bootstrapping a new node, where it fetches a snapshot\nof the state machine at a given height and restores it. Depending on the application, this can\nbe several orders of magnitude faster than replaying blocks.")]),e._v(" "),a("p",[e._v("Note that state sync does not currently backfill historical blocks, so the node will have a\ntruncated block history - users are advised to consider the broader network implications of this in\nterms of block availability and auditability. This functionality may be added in the future.")]),e._v(" "),a("p",[e._v("For details on the specific ABCI calls and types, see the "),a("RouterLink",{attrs:{to:"/spec/abci/abci.html"}},[e._v("methods and types section")]),e._v(".")],1),e._v(" "),a("h3",{attrs:{id:"taking-snapshots"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#taking-snapshots"}},[e._v("#")]),e._v(" Taking Snapshots")]),e._v(" "),a("p",[e._v("Applications that want to support state syncing must take state snapshots at regular intervals. How\nthis is accomplished is entirely up to the application. A snapshot consists of some metadata and\na set of binary chunks in an arbitrary format:")]),e._v(" "),a("ul",[a("li",[a("p",[a("code",[e._v("Height (uint64)")]),e._v(": The height at which the snapshot is taken. It must be taken after the given\nheight has been committed, and must not contain data from any later heights.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Format (uint32)")]),e._v(": An arbitrary snapshot format identifier. This can be used to version snapshot\nformats, e.g. to switch from Protobuf to MessagePack for serialization. The application can use\nthis when restoring to choose whether to accept or reject a snapshot.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Chunks (uint32)")]),e._v(": The number of chunks in the snapshot. Each chunk contains arbitrary binary\ndata, and should be less than 16 MB; 10 MB is a good starting point.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Hash ([]byte)")]),e._v(": An arbitrary hash of the snapshot. This is used to check whether a snapshot is\nthe same across nodes when downloading chunks.")])]),e._v(" "),a("li",[a("p",[a("code",[e._v("Metadata ([]byte)")]),e._v(": Arbitrary snapshot metadata, e.g. chunk hashes for verification or any other\nnecessary info.")])])]),e._v(" "),a("p",[e._v("For a snapshot to be considered the same across nodes, all of these fields must be identical. When\nsent across the network, snapshot metadata messages are limited to 4 MB.")]),e._v(" "),a("p",[e._v("When a new node is running state sync and discovering snapshots, Tendermint will query an existing\napplication via the ABCI "),a("code",[e._v("ListSnapshots")]),e._v(" method to discover available snapshots, and load binary\nsnapshot chunks via "),a("code",[e._v("LoadSnapshotChunk")]),e._v(". The application is free to choose how to implement this\nand which formats to use, but must provide the following guarantees:")]),e._v(" "),a("ul",[a("li",[a("p",[a("strong",[e._v("Consistent:")]),e._v(" A snapshot must be taken at a single isolated height, unaffected by\nconcurrent writes. This can be accomplished by using a data store that supports ACID\ntransactions with snapshot isolation.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Asynchronous:")]),e._v(" Taking a snapshot can be time-consuming, so it must not halt chain progress,\nfor example by running in a separate thread.")])]),e._v(" "),a("li",[a("p",[a("strong",[e._v("Deterministic:")]),e._v(" A snapshot taken at the same height in the same format must be identical\n(at the byte level) across nodes, including all metadata. This ensures good availability of\nchunks, and that they fit together across nodes.")])])]),e._v(" "),a("p",[e._v("A very basic approach might be to use a datastore with MVCC transactions (such as RocksDB),\nstart a transaction immediately after block commit, and spawn a new thread which is passed the\ntransaction handle. This thread can then export all data items, serialize them using e.g.\nProtobuf, hash the byte stream, split it into chunks, and store the chunks in the file system\nalong with some metadata - all while the blockchain is applying new blocks in parallel.")]),e._v(" "),a("p",[e._v("A more advanced approach might include incremental verification of individual chunks against the\nchain app hash, parallel or batched exports, compression, and so on.")]),e._v(" "),a("p",[e._v("Old snapshots should be removed after some time - generally only the last two snapshots are needed\n(to prevent the last one from being removed while a node is restoring it).")]),e._v(" "),a("h3",{attrs:{id:"bootstrapping-a-node"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#bootstrapping-a-node"}},[e._v("#")]),e._v(" Bootstrapping a Node")]),e._v(" "),a("p",[e._v("An empty node can be state synced by setting the configuration option "),a("code",[e._v("statesync.enabled = true")]),e._v(". The node also needs the chain genesis file for basic chain info, and configuration for\nlight client verification of the restored snapshot: a set of Tendermint RPC servers, and a\ntrusted header hash and corresponding height from a trusted source, via the "),a("code",[e._v("statesync")]),e._v("\nconfiguration section.")]),e._v(" "),a("p",[e._v("Once started, the node will connect to the P2P network and begin discovering snapshots. These\nwill be offered to the local application via the "),a("code",[e._v("OfferSnapshot")]),e._v(" ABCI method. Once a snapshot\nis accepted Tendermint will fetch and apply the snapshot chunks. After all chunks have been\nsuccessfully applied, Tendermint verifies the app's "),a("code",[e._v("AppHash")]),e._v(" against the chain using the light\nclient, then switches the node to normal consensus operation.")]),e._v(" "),a("h4",{attrs:{id:"snapshot-discovery"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-discovery"}},[e._v("#")]),e._v(" Snapshot Discovery")]),e._v(" "),a("p",[e._v("When the empty node join the P2P network, it asks all peers to report snapshots via the\n"),a("code",[e._v("ListSnapshots")]),e._v(" ABCI call (limited to 10 per node). After some time, the node picks the most\nsuitable snapshot (generally prioritized by height, format, and number of peers), and offers it\nto the application via "),a("code",[e._v("OfferSnapshot")]),e._v(". The application can choose a number of responses,\nincluding accepting or rejecting it, rejecting the offered format, rejecting the peer who sent\nit, and so on. Tendermint will keep discovering and offering snapshots until one is accepted or\nthe application aborts.")]),e._v(" "),a("h4",{attrs:{id:"snapshot-restoration"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-restoration"}},[e._v("#")]),e._v(" Snapshot Restoration")]),e._v(" "),a("p",[e._v("Once a snapshot has been accepted via "),a("code",[e._v("OfferSnapshot")]),e._v(", Tendermint begins downloading chunks from\nany peers that have the same snapshot (i.e. that have identical metadata fields). Chunks are\nspooled in a temporary directory, and then given to the application in sequential order via\n"),a("code",[e._v("ApplySnapshotChunk")]),e._v(" until all chunks have been accepted.")]),e._v(" "),a("p",[e._v("The method for restoring snapshot chunks is entirely up to the application.")]),e._v(" "),a("p",[e._v("During restoration, the application can respond to "),a("code",[e._v("ApplySnapshotChunk")]),e._v(" with instructions for how\nto continue. This will typically be to accept the chunk and await the next one, but it can also\nask for chunks to be refetched (either the current one or any number of previous ones), P2P peers\nto be banned, snapshots to be rejected or retried, and a number of other responses - see the ABCI\nreference for details.")]),e._v(" "),a("p",[e._v("If Tendermint fails to fetch a chunk after some time, it will reject the snapshot and try a\ndifferent one via "),a("code",[e._v("OfferSnapshot")]),e._v(" - the application can choose whether it wants to support\nrestarting restoration, or simply abort with an error.")]),e._v(" "),a("h4",{attrs:{id:"snapshot-verification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#snapshot-verification"}},[e._v("#")]),e._v(" Snapshot Verification")]),e._v(" "),a("p",[e._v("Once all chunks have been accepted, Tendermint issues an "),a("code",[e._v("Info")]),e._v(" ABCI call to retrieve the\n"),a("code",[e._v("LastBlockAppHash")]),e._v(". This is compared with the trusted app hash from the chain, retrieved and\nverified using the light client. Tendermint also checks that "),a("code",[e._v("LastBlockHeight")]),e._v(" corresponds to the\nheight of the snapshot.")]),e._v(" "),a("p",[e._v("This verification ensures that an application is valid before joining the network. However, the\nsnapshot restoration may take a long time to complete, so applications may want to employ additional\nverification during the restore to detect failures early. This might e.g. include incremental\nverification of each chunk against the app hash (using bundled Merkle proofs), checksums to\nprotect against data corruption by the disk or network, and so on. However, it is important to\nnote that the only trusted information available is the app hash, and all other snapshot metadata\ncan be spoofed by adversaries.")]),e._v(" "),a("p",[e._v("Apps may also want to consider state sync denial-of-service vectors, where adversaries provide\ninvalid or harmful snapshots to prevent nodes from joining the network. The application can\ncounteract this by asking Tendermint to ban peers. As a last resort, node operators can use\nP2P configuration options to whitelist a set of trusted peers that can provide valid snapshots.")]),e._v(" "),a("h4",{attrs:{id:"transition-to-consensus"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#transition-to-consensus"}},[e._v("#")]),e._v(" Transition to Consensus")]),e._v(" "),a("p",[e._v("Once the snapshots have all been restored, Tendermint gathers additional information necessary for\nbootstrapping the node (e.g. chain ID, consensus parameters, validator sets, and block headers)\nfrom the genesis file and light client RPC servers. It also fetches and records the "),a("code",[e._v("AppVersion")]),e._v("\nfrom the ABCI application.")]),e._v(" "),a("p",[e._v("Once the state machine has been restored and Tendermint has gathered this additional\ninformation, it transitions to block sync (if enabled) to fetch any remaining blocks up the chain\nhead, and then transitions to regular consensus operation. At this point the node operates like\nany other node, apart from having a truncated block history at the height of the restored snapshot.")])],1)}),[],!1,null,null,null);t.default=o.exports}}]);