(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{753:function(e,t,v){"use strict";v.r(t);var o=v(1),a=Object(o.a)({},(function(){var e=this,t=e.$createElement,v=e._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("h1",{attrs:{id:"methods"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#methods"}},[e._v("#")]),e._v(" Methods")]),e._v(" "),v("h2",{attrs:{id:"methods-existing-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#methods-existing-in-abci"}},[e._v("#")]),e._v(" Methods existing in ABCI")]),e._v(" "),v("h3",{attrs:{id:"echo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#echo"}},[e._v("#")]),e._v(" Echo")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Request")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("Message (string)")]),e._v(": A string to echo back")])])]),e._v(" "),v("li",[v("strong",[e._v("Response")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("Message (string)")]),e._v(": The input string")])])]),e._v(" "),v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Echo a string to test an abci client/server implementation")])])])]),e._v(" "),v("h3",{attrs:{id:"flush"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#flush"}},[e._v("#")]),e._v(" Flush")]),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Signals that messages queued on the client should be flushed to\nthe server. It is called periodically by the client\nimplementation to ensure asynchronous requests are actually\nsent, and is called immediately to make a synchronous request,\nwhich returns when the Flush response comes back.")])])])]),e._v(" "),v("h3",{attrs:{id:"info"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#info"}},[e._v("#")]),e._v(" Info")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The Tendermint software semantic version")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("block_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The Tendermint Block Protocol version")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("p2p_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The Tendermint P2P Protocol version")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("abci_version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The Tendermint ABCI semantic version")]),e._v(" "),v("td",[e._v("4")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Some arbitrary information")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The application software semantic version")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_version")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The application protocol version")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("last_block_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Latest height for which the app persisted its state")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("last_block_app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Latest AppHash returned by "),v("code",[e._v("FinalizeBlock")])]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Return information about the application state.")]),e._v(" "),v("li",[e._v("Used to sync Tendermint with the application during a handshake\nthat happens on startup or on recovery.")]),e._v(" "),v("li",[e._v("The returned "),v("code",[e._v("app_version")]),e._v(" will be included in the Header of every block.")]),e._v(" "),v("li",[e._v("Tendermint expects "),v("code",[e._v("last_block_app_hash")]),e._v(" and "),v("code",[e._v("last_block_height")]),e._v(" to\nbe updated during "),v("code",[e._v("FinalizeBlock")]),e._v(" and persisted during "),v("code",[e._v("Commit")]),e._v(".")])])])]),e._v(" "),v("blockquote",[v("p",[e._v("Note: Semantic version is a reference to "),v("a",{attrs:{href:"https://semver.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("semantic versioning"),v("OutboundLink")],1),e._v(". Semantic versions in info will be displayed as X.X.x.")])]),e._v(" "),v("h3",{attrs:{id:"initchain"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#initchain"}},[e._v("#")]),e._v(" InitChain")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Genesis time")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("chain_id")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("ID of the blockchain.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_params")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Initial consensus-critical parameters.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Initial genesis validators, sorted by voting power.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("app_state_bytes")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Serialized initial application state. JSON bytes.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("initial_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the initial block (typically "),v("code",[e._v("1")]),e._v(").")]),e._v(" "),v("td",[e._v("6")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("consensus_params")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Initial consensus-critical parameters (optional)")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("validators")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Initial validator set (optional).")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Initial application hash.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Called once upon genesis.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponseInitChain.Validators")]),e._v(" is empty, the initial validator set will be the "),v("code",[e._v("RequestInitChain.Validators")])]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponseInitChain.Validators")]),e._v(" is not empty, it will be the initial\nvalidator set (regardless of what is in "),v("code",[e._v("RequestInitChain.Validators")]),e._v(").")]),e._v(" "),v("li",[e._v("This allows the app to decide if it wants to accept the initial validator\nset proposed by Tendermint (ie. in the genesis file), or if it wants to use\na different one (perhaps computed based on some application specific\ninformation in the genesis file).")]),e._v(" "),v("li",[e._v("Both "),v("code",[e._v("RequestInitChain.Validators")]),e._v(" and "),v("code",[e._v("ResponseInitChain.Validators")]),e._v(" are "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")]),e._v(" structs.\nSo, technically, they both are "),v("em",[e._v("updating")]),e._v(" the set of validators from the empty set.")])])])]),e._v(" "),v("h3",{attrs:{id:"query"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#query"}},[e._v("#")]),e._v(" Query")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Raw query bytes. Can be used with or in lieu of Path.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("path")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Path field of the request URI. Can be used with or in lieu of "),v("code",[e._v("data")]),e._v(". Apps MUST interpret "),v("code",[e._v("/store")]),e._v(" as a query by key on the underlying store. The key SHOULD be specified in the "),v("code",[e._v("data")]),e._v(" field. Apps SHOULD allow queries over specific types like "),v("code",[e._v("/accounts/...")]),e._v(" or "),v("code",[e._v("/votes/...")])]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The block height for which you want the query (default=0 returns data for the latest committed block). Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("prove")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("Return Merkle proof with response if possible")]),e._v(" "),v("td",[e._v("4")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("log")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The output of the application's logger. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("info")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Additional information. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("index")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The index of the key in the tree.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("key")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The key of the matching data.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("value")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The value of the matching data.")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("proof_ops")]),e._v(" "),v("td",[v("a",{attrs:{href:"#proofops"}},[e._v("ProofOps")])]),e._v(" "),v("td",[e._v("Serialized proof for the value data, if requested, to be verified against the "),v("code",[e._v("app_hash")]),e._v(" for the given Height.")]),e._v(" "),v("td",[e._v("8")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The block height from which data was derived. Note that this is the height of the block containing the application's Merkle root hash, which represents the state as it was after committing the block at Height-1")]),e._v(" "),v("td",[e._v("9")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("10")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Query for data from the application at current or past height.")]),e._v(" "),v("li",[e._v("Optionally return Merkle proof.")]),e._v(" "),v("li",[e._v("Merkle proof includes self-describing "),v("code",[e._v("type")]),e._v(" field to support many types\nof Merkle trees and encoding formats.")])])])]),e._v(" "),v("h3",{attrs:{id:"checktx"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#checktx"}},[e._v("#")]),e._v(" CheckTx")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("tx")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The request transaction bytes")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[e._v("CheckTxType")]),e._v(" "),v("td",[e._v("One of "),v("code",[e._v("CheckTx_New")]),e._v(" or "),v("code",[e._v("CheckTx_Recheck")]),e._v(". "),v("code",[e._v("CheckTx_New")]),e._v(" is the default and means that a full check of the tranasaction is required. "),v("code",[e._v("CheckTx_Recheck")]),e._v(" types are used when the mempool is initiating a normal recheck of a transaction.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Result bytes, if any.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("gas_wanted")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas requested for transaction.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("8")])]),e._v(" "),v("tr",[v("td",[e._v("sender")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The transaction's sender (e.g. the signer)")]),e._v(" "),v("td",[e._v("9")])]),e._v(" "),v("tr",[v("td",[e._v("priority")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The transaction's priority (for mempool ordering)")]),e._v(" "),v("td",[e._v("10")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Technically optional - not involved in processing blocks.")]),e._v(" "),v("li",[e._v("Guardian of the mempool: every node runs "),v("code",[e._v("CheckTx")]),e._v(" before letting a\ntransaction into its local mempool.")]),e._v(" "),v("li",[e._v("The transaction may come from an external user or another node")]),e._v(" "),v("li",[v("code",[e._v("CheckTx")]),e._v(" validates the transaction against the current state of the application,\nfor example, checking signatures and account balances, but does not apply any\nof the state changes described in the transaction.")]),e._v(" "),v("li",[e._v("Transactions where "),v("code",[e._v("ResponseCheckTx.Code != 0")]),e._v(" will be rejected - they will not be broadcast\nto other nodes or included in a proposal block.\nTendermint attributes no other value to the response code.")])])])]),e._v(" "),v("h3",{attrs:{id:"commit"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#commit"}},[e._v("#")]),e._v(" Commit")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody")]),e._v(" "),v("p",[e._v("Commit signals the application to persist application state. It takes no parameters.")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("retain_height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Blocks below this height may be removed. Defaults to "),v("code",[e._v("0")]),e._v(" (retain all).")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Signal the Application to persist the application state.\nApplication is expected to persist its state at the end of this call, before calling "),v("code",[e._v("ResponseCommit")]),e._v(".")]),e._v(" "),v("li",[e._v("Use "),v("code",[e._v("ResponseCommit.retain_height")]),e._v(" with caution! If all nodes in the network remove historical\nblocks then this data is permanently lost, and no new nodes will be able to join the network and\nbootstrap. Historical blocks may also be required for other purposes, e.g. auditing, replay of\nnon-persisted heights, light client verification, and so on.")])])])]),e._v(" "),v("h3",{attrs:{id:"listsnapshots"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#listsnapshots"}},[e._v("#")]),e._v(" ListSnapshots")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody")]),e._v(" "),v("p",[e._v("Empty request asking the application for a list of snapshots.")])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("snapshots")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#snapshot"}},[e._v("Snapshot")])]),e._v(" "),v("td",[e._v("List of local state snapshots.")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used during state sync to discover available snapshots on peers.")]),e._v(" "),v("li",[e._v("See "),v("code",[e._v("Snapshot")]),e._v(" data type for details.")])])])]),e._v(" "),v("h3",{attrs:{id:"loadsnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#loadsnapshotchunk"}},[e._v("#")]),e._v(" LoadSnapshotChunk")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The height of the snapshot the chunk belongs to.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("format")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The application-specific format of the snapshot the chunk belongs to.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The chunk index, starting from "),v("code",[e._v("0")]),e._v(" for the initial chunk.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The binary chunk contents, in an arbitray format. Chunk messages cannot be larger than 16 MB "),v("em",[e._v("including metadata")]),e._v(", so 10 MB is a good starting point.")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used during state sync to retrieve snapshot chunks from peers.")])])])]),e._v(" "),v("h3",{attrs:{id:"offersnapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#offersnapshot"}},[e._v("#")]),e._v(" OfferSnapshot")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("snapshot")]),e._v(" "),v("td",[v("a",{attrs:{href:"#snapshot"}},[e._v("Snapshot")])]),e._v(" "),v("td",[e._v("The snapshot offered for restoration.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The light client-verified app hash for this height, from the blockchain.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("result")]),e._v(" "),v("td",[v("a",{attrs:{href:"#result"}},[e._v("Result")])]),e._v(" "),v("td",[e._v("The result of the snapshot offer.")]),e._v(" "),v("td",[e._v("1")])])])])])]),e._v(" "),v("h4",{attrs:{id:"result"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#result"}},[e._v("#")]),e._v(" Result")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"protobuf",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgID0gMDsgIC8vIFVua25vd24gcmVzdWx0LCBhYm9ydCBhbGwgc25hcHNob3QgcmVzdG9yYXRpb24KICAgIEFDQ0VQVCAgICAgICAgPSAxOyAgLy8gU25hcHNob3QgaXMgYWNjZXB0ZWQsIHN0YXJ0IGFwcGx5aW5nIGNodW5rcy4KICAgIEFCT1JUICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFSkVDVCAgICAgICAgPSAzOyAgLy8gUmVqZWN0IHRoaXMgc3BlY2lmaWMgc25hcHNob3QsIHRyeSBvdGhlcnMuCiAgICBSRUpFQ1RfRk9STUFUID0gNDsgIC8vIFJlamVjdCBhbGwgc25hcHNob3RzIHdpdGggdGhpcyBgZm9ybWF0YCwgdHJ5IG90aGVycy4KICAgIFJFSkVDVF9TRU5ERVIgPSA1OyAgLy8gUmVqZWN0IGFsbCBzbmFwc2hvdHMgZnJvbSBhbGwgc2VuZGVycyBvZiB0aGlzIHNuYXBzaG90LCB0cnkgb3RoZXJzLgogIH0K"}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[v("code",[e._v("OfferSnapshot")]),e._v(" is called when bootstrapping a node using state sync. The application may\naccept or reject snapshots as appropriate. Upon accepting, Tendermint will retrieve and\napply snapshot chunks via "),v("code",[e._v("ApplySnapshotChunk")]),e._v(". The application may also choose to reject a\nsnapshot in the chunk response, in which case it should be prepared to accept further\n"),v("code",[e._v("OfferSnapshot")]),e._v(" calls.")]),e._v(" "),v("li",[e._v("Only "),v("code",[e._v("AppHash")]),e._v(" can be trusted, as it has been verified by the light client. Any other data\ncan be spoofed by adversaries, so applications should employ additional verification schemes\nto avoid denial-of-service attacks. The verified "),v("code",[e._v("AppHash")]),e._v(" is automatically checked against\nthe restored application at the end of snapshot restoration.")]),e._v(" "),v("li",[e._v("For more information, see the "),v("code",[e._v("Snapshot")]),e._v(" data type or the "),v("RouterLink",{attrs:{to:"/spec/p2p/messages/state-sync.html"}},[e._v("state sync section")]),e._v(".")],1)])])]),e._v(" "),v("h3",{attrs:{id:"applysnapshotchunk"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#applysnapshotchunk"}},[e._v("#")]),e._v(" ApplySnapshotChunk")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("index")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The chunk index, starting from "),v("code",[e._v("0")]),e._v(". Tendermint applies chunks sequentially.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("chunk")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The binary chunk contents, as returned by "),v("code",[e._v("LoadSnapshotChunk")]),e._v(".")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("sender")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The P2P ID of the node who sent this chunk.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("result")]),e._v(" "),v("td",[e._v("Result  (see below)")]),e._v(" "),v("td",[e._v("The result of applying this chunk.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("refetch_chunks")]),e._v(" "),v("td",[e._v("repeated uint32")]),e._v(" "),v("td",[e._v("Refetch and reapply the given chunks, regardless of "),v("code",[e._v("result")]),e._v(". Only the listed chunks will be refetched, and reapplied in sequential order.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("reject_senders")]),e._v(" "),v("td",[e._v("repeated string")]),e._v(" "),v("td",[e._v("Reject the given P2P senders, regardless of "),v("code",[e._v("Result")]),e._v(". Any chunks already applied will not be refetched unless explicitly requested, but queued chunks from these senders will be discarded, and new chunks or other snapshots rejected.")]),e._v(" "),v("td",[e._v("3")])])])])])]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ICBlbnVtIFJlc3VsdCB7CiAgICBVTktOT1dOICAgICAgICAgPSAwOyAgLy8gVW5rbm93biByZXN1bHQsIGFib3J0IGFsbCBzbmFwc2hvdCByZXN0b3JhdGlvbgogICAgQUNDRVBUICAgICAgICAgID0gMTsgIC8vIFRoZSBjaHVuayB3YXMgYWNjZXB0ZWQuCiAgICBBQk9SVCAgICAgICAgICAgPSAyOyAgLy8gQWJvcnQgc25hcHNob3QgcmVzdG9yYXRpb24sIGFuZCBkb24ndCB0cnkgYW55IG90aGVyIHNuYXBzaG90cy4KICAgIFJFVFJZICAgICAgICAgICA9IDM7ICAvLyBSZWFwcGx5IHRoaXMgY2h1bmssIGNvbWJpbmUgd2l0aCBgUmVmZXRjaENodW5rc2AgYW5kIGBSZWplY3RTZW5kZXJzYCBhcyBhcHByb3ByaWF0ZS4KICAgIFJFVFJZX1NOQVBTSE9UICA9IDQ7ICAvLyBSZXN0YXJ0IHRoaXMgc25hcHNob3QgZnJvbSBgT2ZmZXJTbmFwc2hvdGAsIHJldXNpbmcgY2h1bmtzIHVubGVzcyBpbnN0cnVjdGVkIG90aGVyd2lzZS4KICAgIFJFSkVDVF9TTkFQU0hPVCA9IDU7ICAvLyBSZWplY3QgdGhpcyBzbmFwc2hvdCwgdHJ5IGEgZGlmZmVyZW50IG9uZS4KICB9Cg=="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("The application can choose to refetch chunks and/or ban P2P peers as appropriate. Tendermint\nwill not do this unless instructed by the application.")]),e._v(" "),v("li",[e._v("The application may want to verify each chunk, e.g. by attaching chunk hashes in\n"),v("code",[e._v("Snapshot.Metadata")]),e._v(" and/or incrementally verifying contents against "),v("code",[e._v("AppHash")]),e._v(".")]),e._v(" "),v("li",[e._v("When all chunks have been accepted, Tendermint will make an ABCI "),v("code",[e._v("Info")]),e._v(" call to verify that\n"),v("code",[e._v("LastBlockAppHash")]),e._v(" and "),v("code",[e._v("LastBlockHeight")]),e._v(" matches the expected values, and record the\n"),v("code",[e._v("AppVersion")]),e._v(" in the node state. It then switches to block sync or consensus and joins the\nnetwork.")]),e._v(" "),v("li",[e._v("If Tendermint is unable to retrieve the next chunk after some time (e.g. because no suitable\npeers are available), it will reject the snapshot and try a different one via "),v("code",[e._v("OfferSnapshot")]),e._v(".\nThe application should be prepared to reset and accept it or abort as appropriate.")])])])]),e._v(" "),v("h2",{attrs:{id:"new-methods-introduced-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#new-methods-introduced-in-abci"}},[e._v("#")]),e._v(" New methods introduced in ABCI++")]),e._v(" "),v("h3",{attrs:{id:"prepareproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#prepareproposal"}},[e._v("#")]),e._v(" PrepareProposal")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-2"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-2"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("max_tx_bytes")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Currently configured maximum size in bytes taken by the modified transactions.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("Preliminary list of transactions that have been picked as part of the block to propose.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("local_last_commit")]),e._v(" "),v("td",[v("a",{attrs:{href:"#extendedcommitinfo"}},[e._v("ExtendedCommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, obtained locally from Tendermint's data structures.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("misbehavior")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#misbehavior"}},[e._v("Misbehavior")])]),e._v(" "),v("td",[e._v("List of information about validators that misbehaved.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The height of the block that will be proposed.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Timestamp of the block that that will be proposed.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("next_validators_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Merkle root of the next validator set.")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("proposer_address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that is creating the proposal.")],1),e._v(" "),v("td",[e._v("8")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("tx_records")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#txrecord"}},[e._v("TxRecord")])]),e._v(" "),v("td",[e._v("Possibly modified list of transactions that have been picked as part of the proposed block.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#exectxresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to gas, size, and other consensus-related parameters.")]),e._v(" "),v("td",[e._v("6")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("RequestPrepareProposal")]),e._v("'s parameters "),v("code",[e._v("txs")]),e._v(", "),v("code",[e._v("misbehavior")]),e._v(", "),v("code",[e._v("height")]),e._v(", "),v("code",[e._v("time")]),e._v(",\n"),v("code",[e._v("next_validators_hash")]),e._v(", and "),v("code",[e._v("proposer_address")]),e._v(" are the same as in "),v("code",[e._v("RequestProcessProposal")]),e._v("\nand "),v("code",[e._v("RequestFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("RequestPrepareProposal.local_last_commit")]),e._v(" is a set of the precommit votes that allowed the\ndecision of the previous block, together with their corresponding vote extensions.")]),e._v(" "),v("li",[e._v("The "),v("code",[e._v("height")]),e._v(", "),v("code",[e._v("time")]),e._v(", and "),v("code",[e._v("proposer_address")]),e._v(" values match the values from the header of the\nproposed block.")]),e._v(" "),v("li",[v("code",[e._v("RequestPrepareProposal")]),e._v(" contains a preliminary set of transactions "),v("code",[e._v("txs")]),e._v(" that Tendermint\nretrieved from the mempool, called "),v("em",[e._v("raw proposal")]),e._v(". The Application can modify this\nset via "),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(" (see "),v("a",{attrs:{href:"#txrecord"}},[e._v("TxRecord")]),e._v(").\n"),v("ul",[v("li",[e._v("The Application "),v("em",[e._v("can")]),e._v(" modify the raw proposal: it can reorder, remove or add transactions.\nLet "),v("code",[e._v("tx")]),e._v(" be a transaction in "),v("code",[e._v("txs")]),e._v(":\n"),v("ul",[v("li",[e._v("If the Application considers that "),v("code",[e._v("tx")]),e._v(" should not be proposed in this block, e.g.,\nthere are other transactions with higher priority, then it should not include it in\n"),v("code",[e._v("tx_records")]),e._v(". In this case, Tendermint will not remove "),v("code",[e._v("tx")]),e._v(" from the mempool. The\nApplication should be extra-careful, as abusing this feature may cause transactions\nto stay much longer than needed in the mempool.")]),e._v(" "),v("li",[e._v("If the Application considers that "),v("code",[e._v("tx")]),e._v(" should not be included in the proposal and\nremoved from the mempool, then the Application should include it in "),v("code",[e._v("tx_records")]),e._v(" and\n"),v("em",[e._v("mark")]),e._v(" it as "),v("code",[e._v("REMOVED")]),e._v(". In this case, Tendermint will remove "),v("code",[e._v("tx")]),e._v(" from the mempool.")]),e._v(" "),v("li",[e._v("If the Application wants to add a new transaction to the proposed block, then the\nApplication includes it in "),v("code",[e._v("tx_records")]),e._v(" and "),v("em",[e._v("marks")]),e._v(" it as "),v("code",[e._v("ADDED")]),e._v(". In this case, Tendermint\nwill also add the transaction to the mempool.")])])]),e._v(" "),v("li",[e._v("The Application should be aware that removing and adding transactions may compromise\n"),v("em",[e._v("traceability")]),e._v(".\n"),v("blockquote",[v("p",[e._v("Consider the following example: the Application transforms a client-submitted\ntransaction "),v("code",[e._v("t1")]),e._v(" into a second transaction "),v("code",[e._v("t2")]),e._v(", i.e., the Application asks Tendermint\nto remove "),v("code",[e._v("t1")]),e._v(" and add "),v("code",[e._v("t2")]),e._v(" to the mempool. If a client wants to eventually check what\nhappened to "),v("code",[e._v("t1")]),e._v(", it will discover that "),v("code",[e._v("t1")]),e._v(" is neither in the mempool nor in a\ncommitted block, getting the wrong idea that "),v("code",[e._v("t1")]),e._v(" did not make it into a block. Note\nthat "),v("code",[e._v("t2")]),e._v(" "),v("em",[e._v("will be")]),e._v(" in a committed block, but unless the Application tracks this\ninformation, no component will be aware of it. Thus, if the Application wants\ntraceability, it is its responsability to support it. For instance, the Application\ncould attach to a transformed transaction a list with the hashes of the transactions it\nderives from.")])])])])]),e._v(" "),v("li",[e._v("Tendermint MAY include a list of transactions in "),v("code",[e._v("RequestPrepareProposal.txs")]),e._v(" whose total\nsize in bytes exceeds "),v("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(".\nTherefore, if the size of "),v("code",[e._v("RequestPrepareProposal.txs")]),e._v(" is greater than\n"),v("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(", the Application MUST remove transactions to ensure\nthat the "),v("code",[e._v("RequestPrepareProposal.max_tx_bytes")]),e._v(" limit is respected by those transaction\nrecords returned in "),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(" that are marked as "),v("code",[e._v("UNMODIFIED")]),e._v(" or\n"),v("code",[e._v("ADDED")]),e._v(".")]),e._v(" "),v("li",[e._v("In same-block execution mode, the Application must provide values for\n"),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(", as a result of fully executing the block.\n"),v("ul",[v("li",[e._v("The values for "),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", or\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(" may be empty. In this case, Tendermint will keep\nthe current values.")]),e._v(" "),v("li",[v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", triggered by block "),v("code",[e._v("H")]),e._v(", affect validation\nfor blocks "),v("code",[e._v("H+1")]),e._v(", and "),v("code",[e._v("H+2")]),e._v(". Heights following a validator update are affected in the following way:\n"),v("ul",[v("li",[e._v("Height "),v("code",[e._v("H")]),e._v(": "),v("code",[e._v("NextValidatorsHash")]),e._v(" includes the new "),v("code",[e._v("validator_updates")]),e._v(" value.")]),e._v(" "),v("li",[e._v("Height "),v("code",[e._v("H+1")]),e._v(": The validator set change takes effect and "),v("code",[e._v("ValidatorsHash")]),e._v(" is updated.")]),e._v(" "),v("li",[e._v("Height "),v("code",[e._v("H+2")]),e._v(": "),v("code",[e._v("*_last_commit")]),e._v(" fields in "),v("code",[e._v("PrepareProposal")]),e._v(", "),v("code",[e._v("ProcessProposal")]),e._v(", and\n"),v("code",[e._v("FinalizeBlock")]),e._v(" now include the altered validator set.")])])]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" returned for block "),v("code",[e._v("H")]),e._v(" apply to the consensus\nparams for block "),v("code",[e._v("H+1")]),e._v(" even if the change is agreed in block "),v("code",[e._v("H")]),e._v(".\nFor more information on the consensus parameters,\nsee the "),v("RouterLink",{attrs:{to:"/spec/abci++/abci%2B%2B_app_requirements.html#consensus-parameters"}},[e._v("consensus parameters")]),e._v("\nsection.")],1),e._v(" "),v("li",[e._v("It is the Application's responsibility to set the right value for "),v("em",[e._v("TimeoutPropose")]),e._v(" so that\nthe (synchronous) execution of the block does not cause other processes to prevote "),v("code",[e._v("nil")]),e._v(" because\ntheir propose timeout goes off.")])])]),e._v(" "),v("li",[e._v("In next-block execution mode, Tendermint will ignore parameters\n"),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("As a result of executing the prepared proposal, the Application may produce block events or transaction events.\nThe Application must keep those events until a block is decided and then pass them on to Tendermint via\n"),v("code",[e._v("ResponseFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("Likewise, in next-block execution mode, the Application must keep all responses to executing\ntransactions until it can call "),v("code",[e._v("ResponseFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("As a sanity check, Tendermint will check the returned parameters for validity if the Application modified them.\nIn particular, "),v("code",[e._v("ResponsePrepareProposal.tx_records")]),e._v(" will be deemed invalid if\n"),v("ul",[v("li",[e._v("There is a duplicate transaction in the list.")]),e._v(" "),v("li",[e._v("A new transaction is marked as "),v("code",[e._v("UNMODIFIED")]),e._v(" or "),v("code",[e._v("REMOVED")]),e._v(".")]),e._v(" "),v("li",[e._v("An existing transaction is marked as "),v("code",[e._v("ADDED")]),e._v(".")]),e._v(" "),v("li",[e._v("A transaction is marked as "),v("code",[e._v("UNKNOWN")]),e._v(".")])])]),e._v(" "),v("li",[e._v("If Tendermint fails to validate the "),v("code",[e._v("ResponsePrepareProposal")]),e._v(", Tendermint will assume the\nApplication is faulty and crash.")]),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("PrepareProposal")]),e._v(" can be non-deterministic.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-prepareproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-prepareproposal"}},[e._v("#")]),e._v(" When does Tendermint call "),v("code",[e._v("PrepareProposal")]),e._v("?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" enters Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("p")]),e._v(" is the proposer,\nand "),v("em",[e._v("p")]),e._v("'s "),v("em",[e._v("validValue")]),e._v(" is "),v("code",[e._v("nil")]),e._v(":")]),e._v(" "),v("ol",[v("li",[e._v("Tendermint collects outstanding transactions from "),v("em",[e._v("p")]),e._v("'s mempool\n"),v("ul",[v("li",[e._v("the transactions will be collected in order of priority")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint creates a block header.")])])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestPrepareProposal")]),e._v(" with the newly generated block, the local\ncommit of the previous height (with vote extensions), and any outstanding evidence of\nmisbehavior. The call is synchronous: Tendermint's execution will block until the Application\nreturns from the call.")]),e._v(" "),v("li",[e._v("The Application uses the information received (transactions, commit info, misbehavior, time) to\n(potentially) modify the proposal.\n"),v("ul",[v("li",[e._v("in same-block execution mode, the Application fully executes the block and provides values\nfor "),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("in next-block execution mode, "),v("em",[e._v("p")]),e._v("'s Tendermint will ignore the values for\n"),v("code",[e._v("ResponsePrepareProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponsePrepareProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponsePrepareProposal.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("in both modes, the Application can manipulate transactions:\n"),v("ul",[v("li",[e._v("leave transactions untouched - "),v("code",[e._v("TxAction = UNMODIFIED")])]),e._v(" "),v("li",[e._v("add new transactions (not present initially) to the proposal - "),v("code",[e._v("TxAction = ADDED")])]),e._v(" "),v("li",[e._v("remove (invalid) transactions from the proposal and from the mempool - "),v("code",[e._v("TxAction = REMOVED")])]),e._v(" "),v("li",[e._v("remove transactions from the proposal but not from the mempool (effectively "),v("em",[e._v("delaying")]),e._v(" them) - the\nApplication does not include the transaction in "),v("code",[e._v("ResponsePrepareProposal.tx_records")])]),e._v(" "),v("li",[e._v("modify transactions (e.g. aggregate them) - "),v("code",[e._v("TxAction = ADDED")]),e._v(" followed by\n"),v("code",[e._v("TxAction = REMOVED")]),e._v(". As explained above, this compromises client traceability, unless\nit is implemented at the Application level.")]),e._v(" "),v("li",[e._v("reorder transactions - the Application reorders transactions in the list")])])])])]),e._v(" "),v("li",[e._v("The Application includes the transaction list (whether modified or not) in the return parameters\n(see the rules in section "),v("em",[e._v("Usage")]),e._v("), and returns from the call.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint uses the (possibly) modified block as "),v("em",[e._v("p")]),e._v("'s proposal in round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(".")])]),e._v(" "),v("p",[e._v("Note that, if "),v("em",[e._v("p")]),e._v(" has a non-"),v("code",[e._v("nil")]),e._v(" "),v("em",[e._v("validValue")]),e._v(" in round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", Tendermint will use it as\nproposal and will not call "),v("code",[e._v("RequestPrepareProposal")]),e._v(".")]),e._v(" "),v("h3",{attrs:{id:"processproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#processproposal"}},[e._v("#")]),e._v(" ProcessProposal")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-3"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-3"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("List of transactions of the proposed block.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("proposed_last_commit")]),e._v(" "),v("td",[v("a",{attrs:{href:"#commitinfo"}},[e._v("CommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, obtained from the information in the proposed block.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("misbehavior")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#misbehavior"}},[e._v("Misbehavior")])]),e._v(" "),v("td",[e._v("List of information about validators that misbehaved.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The hash of the proposed block.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The height of the proposed block.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Timestamp of the proposed block.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("next_validators_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Merkle root of the next validator set.")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("proposer_address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that created the proposal.")],1),e._v(" "),v("td",[e._v("8")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("status")]),e._v(" "),v("td",[v("a",{attrs:{href:"#proposalstatus"}},[e._v("ProposalStatus")])]),e._v(" "),v("td",[v("code",[e._v("enum")]),e._v(" that signals if the application finds the proposal valid.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#exectxresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to gas, size, and other consensus-related parameters.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Contains all information on the proposed block needed to fully execute it.\n"),v("ul",[v("li",[e._v("The Application may fully execute the block as though it was handling\n"),v("code",[e._v("RequestFinalizeBlock")]),e._v(".")]),e._v(" "),v("li",[e._v("However, any resulting state changes must be kept as "),v("em",[e._v("candidate state")]),e._v(",\nand the Application should be ready to discard it in case another block is decided.")])])]),e._v(" "),v("li",[v("code",[e._v("RequestProcessProposal")]),e._v(" is also called at the proposer of a round. The reason for this is to\ninform the Application of the block header's hash, which cannot be done at "),v("code",[e._v("PrepareProposal")]),e._v("\ntime. In this case, the call to "),v("code",[e._v("RequestProcessProposal")]),e._v(" occurs right after the call to\n"),v("code",[e._v("RequestPrepareProposal")]),e._v(".")]),e._v(" "),v("li",[e._v("The height and time values match the values from the header of the proposed block.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponseProcessProposal.status")]),e._v(" is "),v("code",[e._v("REJECT")]),e._v(", Tendermint assumes the proposal received\nis not valid.")]),e._v(" "),v("li",[e._v("In same-block execution mode, the Application is required to fully execute the block and provide values\nfor parameters "),v("code",[e._v("ResponseProcessProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponseProcessProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponseProcessProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponseProcessProposal.consensus_param_updates")]),e._v(",\nso that Tendermint can then verify the hashes in the block's header are correct.\nIf the hashes mismatch, Tendermint will reject the block even if "),v("code",[e._v("ResponseProcessProposal.status")]),e._v("\nwas set to "),v("code",[e._v("ACCEPT")]),e._v(".")]),e._v(" "),v("li",[e._v("In next-block execution mode, the Application should "),v("em",[e._v("not")]),e._v(" provide values for parameters\n"),v("code",[e._v("ResponseProcessProposal.app_hash")]),e._v(", "),v("code",[e._v("ResponseProcessProposal.tx_results")]),e._v(",\n"),v("code",[e._v("ResponseProcessProposal.validator_updates")]),e._v(", and "),v("code",[e._v("ResponseProcessProposal.consensus_param_updates")]),e._v(".")]),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("ProcessProposal")]),e._v(" MUST be deterministic. Moreover, the value of\n"),v("code",[e._v("ResponseProcessProposal.status")]),e._v(" MUST "),v("strong",[e._v("exclusively")]),e._v(" depend on the parameters passed in\nthe call to "),v("code",[e._v("RequestProcessProposal")]),e._v(", and the last committed Application state\n(see "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements.html"}},[e._v("Requirements")]),e._v(" section).")],1),e._v(" "),v("li",[e._v("Moreover, application implementors SHOULD always set "),v("code",[e._v("ResponseProcessProposal.status")]),e._v(" to "),v("code",[e._v("ACCEPT")]),e._v(",\nunless they "),v("em",[e._v("really")]),e._v(" know what the potential liveness implications of returning "),v("code",[e._v("REJECT")]),e._v(" are.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-processproposal"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-processproposal"}},[e._v("#")]),e._v(" When does Tendermint call "),v("code",[e._v("ProcessProposal")]),e._v("?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" enters Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("q")]),e._v(" is the proposer (possibly "),v("em",[e._v("p")]),e._v(" = "),v("em",[e._v("q")]),e._v("):")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v(" sets up timer "),v("code",[e._v("ProposeTimeout")]),e._v(".")]),e._v(" "),v("li",[e._v("If "),v("em",[e._v("p")]),e._v(" is the proposer, "),v("em",[e._v("p")]),e._v(" executes steps 1-6 in "),v("a",{attrs:{href:"#prepareproposal"}},[e._v("PrepareProposal")]),e._v(".")]),e._v(" "),v("li",[e._v("Upon reception of Proposal message (which contains the header) for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(" from\n"),v("em",[e._v("q")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint verifies the block header.")]),e._v(" "),v("li",[e._v("Upon reception of Proposal message, along with all the block parts, for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v("\nfrom "),v("em",[e._v("q")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint follows its algorithm to check whether it should prevote for the\nproposed block, or "),v("code",[e._v("nil")]),e._v(".")]),e._v(" "),v("li",[e._v("If Tendermint should prevote for the proposed block:\n"),v("ol",[v("li",[e._v("Tendermint calls "),v("code",[e._v("RequestProcessProposal")]),e._v(" with the block. The call is synchronous.")]),e._v(" "),v("li",[e._v("The Application checks/processes the proposed block, which is read-only, and returns\n"),v("code",[e._v("ACCEPT")]),e._v(" or "),v("code",[e._v("REJECT")]),e._v(" in the "),v("code",[e._v("ResponseProcessProposal.status")]),e._v(" field.\n"),v("ul",[v("li",[e._v("The Application, depending on its needs, may call "),v("code",[e._v("ResponseProcessProposal")]),e._v(" "),v("ul",[v("li",[e._v("either after it has completely processed the block (immediate execution),")]),e._v(" "),v("li",[e._v("or after doing some basic checks, and process the block asynchronously. In this case the\nApplication will not be able to reject the block, or force prevote/precommit "),v("code",[e._v("nil")]),e._v("\nafterwards.")])])])])]),e._v(" "),v("li",[e._v("If the returned value is\n"),v("ul",[v("li",[v("code",[e._v("ACCEPT")]),e._v(": Tendermint prevotes on this proposal for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(".")]),e._v(" "),v("li",[v("code",[e._v("REJECT")]),e._v(": Tendermint prevotes "),v("code",[e._v("nil")]),e._v(".")])])])])])]),e._v(" "),v("h3",{attrs:{id:"extendvote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#extendvote"}},[e._v("#")]),e._v(" ExtendVote")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-4"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-4"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The header hash of the proposed block that the vote extension is to refer to.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the proposed block (for sanity check).")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("vote_extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Information signed by by Tendermint. Can have 0 length.")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("ResponseExtendVote.vote_extension")]),e._v(" is application-generated information that will be signed\nby Tendermint and attached to the Precommit message.")]),e._v(" "),v("li",[e._v("The Application may choose to use an empty vote extension (0 length).")]),e._v(" "),v("li",[v("code",[e._v("RequestExtendVote.hash")]),e._v(" corresponds to the hash of a proposed block that was made available\nto the Application in a previous call to "),v("code",[e._v("ProcessProposal")]),e._v(" for the current height.")]),e._v(" "),v("li",[v("code",[e._v("ResponseExtendVote.vote_extension")]),e._v(" will only be attached to a non-"),v("code",[e._v("nil")]),e._v(" Precommit message. If Tendermint is to\nprecommit "),v("code",[e._v("nil")]),e._v(", it will not call "),v("code",[e._v("RequestExtendVote")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application logic that creates the extension can be non-deterministic.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-extendvote"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-extendvote"}},[e._v("#")]),e._v(" When does Tendermint call "),v("code",[e._v("ExtendVote")]),e._v("?")]),e._v(" "),v("p",[e._v("When a validator "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus state "),v("em",[e._v("prevote")]),e._v(" of round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", in which "),v("em",[e._v("q")]),e._v(" is the proposer; and "),v("em",[e._v("p")]),e._v(" has received")]),e._v(" "),v("ul",[v("li",[e._v("the Proposal message "),v("em",[e._v("v")]),e._v(" for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", along with all the block parts, from "),v("em",[e._v("q")]),e._v(",")]),e._v(" "),v("li",[v("code",[e._v("Prevote")]),e._v(" messages from "),v("em",[e._v("2f + 1")]),e._v(" validators' voting power for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", prevoting for the same block "),v("em",[e._v("id(v)")]),e._v(",")])]),e._v(" "),v("p",[e._v("then "),v("em",[e._v("p")]),e._v("'s Tendermint locks "),v("em",[e._v("v")]),e._v("  and sends a Precommit message in the following way")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint sets "),v("em",[e._v("lockedValue")]),e._v(" and "),v("em",[e._v("validValue")]),e._v(" to "),v("em",[e._v("v")]),e._v(", and sets "),v("em",[e._v("lockedRound")]),e._v(" and "),v("em",[e._v("validRound")]),e._v(" to "),v("em",[e._v("r")])]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestExtendVote")]),e._v(" with "),v("em",[e._v("id(v)")]),e._v(" ("),v("code",[e._v("RequestExtendVote.hash")]),e._v("). The call is synchronous.")]),e._v(" "),v("li",[e._v("The Application returns an array of bytes, "),v("code",[e._v("ResponseExtendVote.extension")]),e._v(", which is not interpreted by Tendermint.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint includes "),v("code",[e._v("ResponseExtendVote.extension")]),e._v(" in a field of type "),v("a",{attrs:{href:"#canonicalvoteextension"}},[e._v("CanonicalVoteExtension")]),e._v(",\nit then populates the other fields in "),v("a",{attrs:{href:"#canonicalvoteextension"}},[e._v("CanonicalVoteExtension")]),e._v(", and signs the populated\ndata structure.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint constructs and signs the "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#canonicalvote"}},[e._v("CanonicalVote")]),e._v(" structure.")],1),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint constructs the Precommit message (i.e. "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#vote"}},[e._v("Vote")]),e._v(" structure)\nusing "),v("a",{attrs:{href:"#canonicalvoteextension"}},[e._v("CanonicalVoteExtension")]),e._v(" and "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#canonicalvote"}},[e._v("CanonicalVote")]),e._v(".")],1),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint broadcasts the Precommit message.")])]),e._v(" "),v("p",[e._v("In the cases when "),v("em",[e._v("p")]),e._v("'s Tendermint is to broadcast "),v("code",[e._v("precommit nil")]),e._v(" messages (either "),v("em",[e._v("2f+1")]),e._v(" "),v("code",[e._v("prevote nil")]),e._v(" messages received,\nor "),v("em",[e._v("timeoutPrevote")]),e._v(" triggered), "),v("em",[e._v("p")]),e._v("'s Tendermint does "),v("strong",[e._v("not")]),e._v(" call "),v("code",[e._v("RequestExtendVote")]),e._v(" and will not include\na "),v("a",{attrs:{href:"#canonicalvoteextension"}},[e._v("CanonicalVoteExtension")]),e._v(" field in the "),v("code",[e._v("precommit nil")]),e._v(" message.")]),e._v(" "),v("h3",{attrs:{id:"verifyvoteextension"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#verifyvoteextension"}},[e._v("#")]),e._v(" VerifyVoteExtension")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-5"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-5"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The hash of the proposed block that the vote extension refers to.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("validator_address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that signed the extension.")],1),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height of the block (for sanity check).")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("vote_extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Application-specific information signed by Tendermint. Can have 0 length.")]),e._v(" "),v("td",[e._v("4")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("status")]),e._v(" "),v("td",[v("a",{attrs:{href:"#verifystatus"}},[e._v("VerifyStatus")])]),e._v(" "),v("td",[v("code",[e._v("enum")]),e._v(" signaling if the application accepts the vote extension")]),e._v(" "),v("td",[e._v("1")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("code",[e._v("RequestVerifyVoteExtension.vote_extension")]),e._v(" can be an empty byte array. The Application's\ninterpretation of it should be\nthat the Application running at the process that sent the vote chose not to extend it.\nTendermint will always call "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(", even for 0 length vote extensions.")]),e._v(" "),v("li",[v("code",[e._v("RequestVerifyVoteExtension")]),e._v(" is not called for precommit votes sent by the local process.")]),e._v(" "),v("li",[v("code",[e._v("RequestVerifyVoteExtension.hash")]),e._v(" refers to a proposed block. There is not guarantee that\nthis proposed block has previously been exposed to the Application via "),v("code",[e._v("ProcessProposal")]),e._v(".")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("ResponseVerifyVoteExtension.status")]),e._v(" is "),v("code",[e._v("REJECT")]),e._v(", Tendermint will reject the whole received vote.\nSee the "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements.html"}},[e._v("Requirements")]),e._v(" section to understand the potential\nliveness implications of this.")],1),e._v(" "),v("li",[e._v("The implementation of "),v("code",[e._v("VerifyVoteExtension")]),e._v(" MUST be deterministic. Moreover, the value of\n"),v("code",[e._v("ResponseVerifyVoteExtension.status")]),e._v(" MUST "),v("strong",[e._v("exclusively")]),e._v(" depend on the parameters passed in\nthe call to "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(", and the last committed Application state\n(see "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_app_requirements.html"}},[e._v("Requirements")]),e._v(" section).")],1),e._v(" "),v("li",[e._v("Moreover, application implementers SHOULD always set "),v("code",[e._v("ResponseVerifyVoteExtension.status")]),e._v(" to "),v("code",[e._v("ACCEPT")]),e._v(",\nunless they "),v("em",[e._v("really")]),e._v(" know what the potential liveness implications of returning "),v("code",[e._v("REJECT")]),e._v(" are.")])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-verifyvoteextension"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-verifyvoteextension"}},[e._v("#")]),e._v(" When does Tendermint call "),v("code",[e._v("VerifyVoteExtension")]),e._v("?")]),e._v(" "),v("p",[e._v("When a node "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(", and "),v("em",[e._v("p")]),e._v(" receives a Precommit\nmessage for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(" from validator "),v("em",[e._v("q")]),e._v(" ("),v("em",[e._v("q")]),e._v(" ≠ "),v("em",[e._v("p")]),e._v("):")]),e._v(" "),v("ol",[v("li",[e._v("If the Precommit message does not contain a vote extension with a valid signature, Tendermint\ndiscards the Precommit message as invalid.\n"),v("ul",[v("li",[e._v("a 0-length vote extension is valid as long as its accompanying signature is also valid.")])])]),e._v(" "),v("li",[e._v("Else, "),v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(".")]),e._v(" "),v("li",[e._v("The Application returns "),v("code",[e._v("ACCEPT")]),e._v(" or "),v("code",[e._v("REJECT")]),e._v(" via "),v("code",[e._v("ResponseVerifyVoteExtension.status")]),e._v(".")]),e._v(" "),v("li",[e._v("If the Application returns\n"),v("ul",[v("li",[v("code",[e._v("ACCEPT")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint will keep the received vote, together with its corresponding\nvote extension in its internal data structures. It will be used to populate the "),v("a",{attrs:{href:"#extendedcommitinfo"}},[e._v("ExtendedCommitInfo")]),e._v("\nstructure in calls to "),v("code",[e._v("RequestPrepareProposal")]),e._v(", in rounds of height "),v("em",[e._v("h + 1")]),e._v(" where "),v("em",[e._v("p")]),e._v(" is the proposer.")]),e._v(" "),v("li",[v("code",[e._v("REJECT")]),e._v(", "),v("em",[e._v("p")]),e._v("'s Tendermint will deem the Precommit message invalid and discard it.")])])])]),e._v(" "),v("h3",{attrs:{id:"finalizeblock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#finalizeblock"}},[e._v("#")]),e._v(" FinalizeBlock")]),e._v(" "),v("h4",{attrs:{id:"parameters-and-types-6"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#parameters-and-types-6"}},[e._v("#")]),e._v(" Parameters and Types")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Request")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("txs")]),e._v(" "),v("td",[e._v("repeated bytes")]),e._v(" "),v("td",[e._v("List of transactions committed as part of the block.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("decided_last_commit")]),e._v(" "),v("td",[v("a",{attrs:{href:"#commitinfo"}},[e._v("CommitInfo")])]),e._v(" "),v("td",[e._v("Info about the last commit, obtained from the block that was just decided.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("misbehavior")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#misbehavior"}},[e._v("Misbehavior")])]),e._v(" "),v("td",[e._v("List of information about validators that misbehaved.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The block's hash.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("The height of the finalized block.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Timestamp of the finalized block.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("next_validators_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Merkle root of the next validator set.")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("proposer_address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that created the proposal.")],1),e._v(" "),v("td",[e._v("8")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Response")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("events")]),e._v(" "),v("td",[e._v("repeated "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_basic_concepts.html#events"}},[e._v("Event")])],1),e._v(" "),v("td",[e._v("Type & Key-Value events for indexing")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tx_results")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#exectxresult"}},[e._v("ExecTxResult")])]),e._v(" "),v("td",[e._v("List of structures containing the data resulting from executing the transactions")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("validator_updates")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#validatorupdate"}},[e._v("ValidatorUpdate")])]),e._v(" "),v("td",[e._v("Changes to validator set (set voting power to 0 to remove).")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("consensus_param_updates")]),e._v(" "),v("td",[v("a",{attrs:{href:"#consensusparams"}},[e._v("ConsensusParams")])]),e._v(" "),v("td",[e._v("Changes to gas, size, and other consensus-related parameters.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("app_hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("The Merkle root hash of the application state.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[v("p",[e._v("Contains the fields of the newly decided block.")])]),e._v(" "),v("li",[v("p",[e._v("This method is equivalent to the call sequence "),v("code",[e._v("BeginBlock")]),e._v(", ["),v("code",[e._v("DeliverTx")]),e._v("],\nand "),v("code",[e._v("EndBlock")]),e._v(" in the previous version of ABCI.")])]),e._v(" "),v("li",[v("p",[e._v("The height and time values match the values from the header of the proposed block.")])]),e._v(" "),v("li",[v("p",[e._v("The Application can use "),v("code",[e._v("RequestFinalizeBlock.decided_last_commit")]),e._v(" and "),v("code",[e._v("RequestFinalizeBlock.misbehavior")]),e._v("\nto determine rewards and punishments for the validators.")])]),e._v(" "),v("li",[v("p",[e._v("The Application executes the transactions in "),v("code",[e._v("RequestFinalizeBlock.txs")]),e._v(" deterministically,\naccording to the rules set up by the Application, before returning control to Tendermint.\nAlternatively, it can apply the candidate state corresponding to the same block previously\nexecuted via "),v("code",[e._v("PrepareProposal")]),e._v(" or "),v("code",[e._v("ProcessProposal")]),e._v(".")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("ResponseFinalizeBlock.tx_results[i].Code == 0")]),e._v(" only if the "),v("em",[e._v("i")]),e._v("-th transaction is fully valid.")])]),e._v(" "),v("li",[v("p",[e._v("In next-block execution mode, the Application must provide values for "),v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(",\n"),v("code",[e._v("ResponseFinalizeBlock.tx_results")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", and\n"),v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" as a result of executing the block.")]),e._v(" "),v("ul",[v("li",[e._v("The values for "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", or\n"),v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" may be empty. In this case, Tendermint will keep\nthe current values.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(", triggered by block "),v("code",[e._v("H")]),e._v(", affect validation\nfor blocks "),v("code",[e._v("H+1")]),e._v(", "),v("code",[e._v("H+2")]),e._v(", and "),v("code",[e._v("H+3")]),e._v(". Heights following a validator update are affected in the following way:\n"),v("ul",[v("li",[e._v("Height "),v("code",[e._v("H+1")]),e._v(": "),v("code",[e._v("NextValidatorsHash")]),e._v(" includes the new "),v("code",[e._v("validator_updates")]),e._v(" value.")]),e._v(" "),v("li",[e._v("Height "),v("code",[e._v("H+2")]),e._v(": The validator set change takes effect and "),v("code",[e._v("ValidatorsHash")]),e._v(" is updated.")]),e._v(" "),v("li",[e._v("Height "),v("code",[e._v("H+3")]),e._v(": "),v("code",[e._v("*_last_commit")]),e._v(" fields in "),v("code",[e._v("PrepareProposal")]),e._v(", "),v("code",[e._v("ProcessProposal")]),e._v(", and\n"),v("code",[e._v("FinalizeBlock")]),e._v(" now include the altered validator set.")])])]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.consensus_param_updates")]),e._v(" returned for block "),v("code",[e._v("H")]),e._v(" apply to the consensus\nparams for block "),v("code",[e._v("H+1")]),e._v(". For more information on the consensus parameters,\nsee the "),v("RouterLink",{attrs:{to:"/spec/abci++/abci%2B%2B_app_requirements.html#consensus-parameters"}},[e._v("consensus parameters")]),e._v("\nsection.")],1)])]),e._v(" "),v("li",[v("p",[e._v("In same-block execution mode, Tendermint will log an error and ignore values for\n"),v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.tx_results")]),e._v(", "),v("code",[e._v("ResponseFinalizeBlock.validator_updates")]),e._v(",\nand "),v("code",[e._v("ResponsePrepareProposal.consensus_param_updates")]),e._v(", as those must have been provided by "),v("code",[e._v("PrepareProposal")]),e._v(".")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" contains an (optional) Merkle root hash of the application state.")])]),e._v(" "),v("li",[v("p",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" is included")]),e._v(" "),v("ul",[v("li",[e._v("[in next-block execution mode] as the "),v("code",[e._v("Header.AppHash")]),e._v(" in the next block.")]),e._v(" "),v("li",[e._v("[in same-block execution mode] as the "),v("code",[e._v("Header.AppHash")]),e._v(" in the current block. In this case,\n"),v("code",[e._v("PrepareProposal")]),e._v(" is required to fully execute the block and set the App hash before\nreturning the proposed block to Tendermint.")]),e._v(" "),v("li",[v("code",[e._v("ResponseFinalizeBlock.app_hash")]),e._v(" may also be empty or hard-coded, but MUST be\n"),v("strong",[e._v("deterministic")]),e._v(" - it must not be a function of anything that did not come from the parameters\nof "),v("code",[e._v("RequestFinalizeBlock")]),e._v(" and the previous committed state.")])])]),e._v(" "),v("li",[v("p",[e._v("Later calls to "),v("code",[e._v("Query")]),e._v(" can return proofs about the application state anchored\nin this Merkle root hash.")])]),e._v(" "),v("li",[v("p",[e._v("The implementation of "),v("code",[e._v("FinalizeBlock")]),e._v(" MUST be deterministic, since it is\nmaking the Application's state evolve in the context of state machine replication.")])]),e._v(" "),v("li",[v("p",[e._v("Currently, Tendermint will fill up all fields in "),v("code",[e._v("RequestFinalizeBlock")]),e._v(", even if they were\nalready passed on to the Application via "),v("code",[e._v("RequestPrepareProposal")]),e._v(" or "),v("code",[e._v("RequestProcessProposal")]),e._v(".\nIf the Application is in same-block execution mode, it applies the right candidate state here\n(rather than executing the whole block). In this case the Application disregards all parameters in\n"),v("code",[e._v("RequestFinalizeBlock")]),e._v(" except "),v("code",[e._v("RequestFinalizeBlock.hash")]),e._v(".")])])])])]),e._v(" "),v("h4",{attrs:{id:"when-does-tendermint-call-finalizeblock"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#when-does-tendermint-call-finalizeblock"}},[e._v("#")]),e._v(" When does Tendermint call "),v("code",[e._v("FinalizeBlock")]),e._v("?")]),e._v(" "),v("p",[e._v("When a node "),v("em",[e._v("p")]),e._v(" is in Tendermint consensus height "),v("em",[e._v("h")]),e._v(", and "),v("em",[e._v("p")]),e._v(" receives")]),e._v(" "),v("ul",[v("li",[e._v("the Proposal message with block "),v("em",[e._v("v")]),e._v(" for a round "),v("em",[e._v("r")]),e._v(", along with all its block parts, from "),v("em",[e._v("q")]),e._v(",\nwhich is the proposer of round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(",")]),e._v(" "),v("li",[v("code",[e._v("Precommit")]),e._v(" messages from "),v("em",[e._v("2f + 1")]),e._v(" validators' voting power for round "),v("em",[e._v("r")]),e._v(", height "),v("em",[e._v("h")]),e._v(",\nprecommitting the same block "),v("em",[e._v("id(v)")]),e._v(",")])]),e._v(" "),v("p",[e._v("then "),v("em",[e._v("p")]),e._v("'s Tendermint decides block "),v("em",[e._v("v")]),e._v(" and finalizes consensus for height "),v("em",[e._v("h")]),e._v(" in the following way")]),e._v(" "),v("ol",[v("li",[v("em",[e._v("p")]),e._v("'s Tendermint persists "),v("em",[e._v("v")]),e._v(" as the decision for height "),v("em",[e._v("h")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestFinalizeBlock")]),e._v(" with "),v("em",[e._v("v")]),e._v("'s data. The call is synchronous.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Application executes block "),v("em",[e._v("v")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Application calculates and returns the "),v("em",[e._v("AppHash")]),e._v(", along with a list containing\nthe outputs of each of the transactions executed.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint hashes all the transaction outputs and stores it in "),v("em",[e._v("ResultHash")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint persists the transaction outputs, "),v("em",[e._v("AppHash")]),e._v(", and "),v("em",[e._v("ResultsHash")]),e._v(".")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint locks the mempool — no calls to "),v("code",[e._v("CheckTx")]),e._v(" on new transactions.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint calls "),v("code",[e._v("RequestCommit")]),e._v(" to instruct the Application to persist its state.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint, optionally, re-checks all outstanding transactions in the mempool\nagainst the newly persisted Application state.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s Tendermint unlocks the mempool — newly received transactions can now be checked.")]),e._v(" "),v("li",[v("em",[e._v("p")]),e._v("'s starts consensus for height "),v("em",[e._v("h+1")]),e._v(", round 0")])]),e._v(" "),v("h2",{attrs:{id:"data-types-existing-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#data-types-existing-in-abci"}},[e._v("#")]),e._v(" Data Types existing in ABCI")]),e._v(" "),v("p",[e._v("Most of the data structures used in ABCI are shared "),v("RouterLink",{attrs:{to:"/spec/core/data_structures.html"}},[e._v("common data structures")]),e._v(". In certain cases, ABCI uses different data structures which are documented here:")],1),e._v(" "),v("h3",{attrs:{id:"validator"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validator"}},[e._v("#")]),e._v(" Validator")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of validator")],1),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Voting power of the validator")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Validator identified by address")]),e._v(" "),v("li",[e._v("Used in RequestBeginBlock as part of VoteInfo")]),e._v(" "),v("li",[e._v("Does not include PubKey to avoid sending potentially large quantum pubkeys\nover the ABCI")])])])]),e._v(" "),v("h3",{attrs:{id:"validatorupdate"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#validatorupdate"}},[e._v("#")]),e._v(" ValidatorUpdate")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("pub_key")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#pub_key"}},[e._v("Public Key")])],1),e._v(" "),v("td",[e._v("Public key of the validator")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Voting power of the validator")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Validator identified by PubKey")]),e._v(" "),v("li",[e._v("Used to tell Tendermint to update the validator set")])])])]),e._v(" "),v("h3",{attrs:{id:"misbehavior"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#misbehavior"}},[e._v("#")]),e._v(" Misbehavior")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[v("a",{attrs:{href:"#misbehaviortype"}},[e._v("MisbehaviorType")])]),e._v(" "),v("td",[e._v("Type of the misbehavior. An enum of possible misbehaviors.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[e._v("Validator")])]),e._v(" "),v("td",[e._v("The offending validator")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height when the offense occurred")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("time")]),e._v(" "),v("td",[v("a",{attrs:{href:"https://developers.google.com/protocol-buffers/docs/reference/google.protobuf#google.protobuf.Timestamp",target:"_blank",rel:"noopener noreferrer"}},[e._v("google.protobuf.Timestamp"),v("OutboundLink")],1)]),e._v(" "),v("td",[e._v("Timestamp of the block that was committed at height "),v("code",[e._v("height")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("total_voting_power")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Total voting power of the validator set at height "),v("code",[e._v("height")])]),e._v(" "),v("td",[e._v("5")])])])])])]),e._v(" "),v("h4",{attrs:{id:"misbehaviortype"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#misbehaviortype"}},[e._v("#")]),e._v(" MisbehaviorType")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")])]),e._v(" "),v("p",[e._v("MisbehaviorType is an enum with the listed fields:")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("UNKNOWN")]),e._v(" "),v("td",[e._v("0")])]),e._v(" "),v("tr",[v("td",[e._v("DUPLICATE_VOTE")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("LIGHT_CLIENT_ATTACK")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"consensusparams"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#consensusparams"}},[e._v("#")]),e._v(" ConsensusParams")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("block")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#blockparams"}},[e._v("BlockParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the size of a block and time between consecutive blocks.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("evidence")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#evidenceparams"}},[e._v("EvidenceParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the validity of evidence of byzantine behaviour.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#validatorparams"}},[e._v("ValidatorParams")])],1),e._v(" "),v("td",[e._v("Parameters limiting the types of public keys validators can use.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("version")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#versionparams"}},[e._v("VersionsParams")])],1),e._v(" "),v("td",[e._v("The ABCI application version.")]),e._v(" "),v("td",[e._v("4")])])])])])]),e._v(" "),v("h3",{attrs:{id:"proofops"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofops"}},[e._v("#")]),e._v(" ProofOps")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("ops")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#proofop"}},[e._v("ProofOp")])]),e._v(" "),v("td",[e._v("List of chained Merkle proofs, of possibly different types. The Merkle root of one op is the value being proven in the next op. The Merkle root of the final op should equal the ultimate root hash being verified against..")]),e._v(" "),v("td",[e._v("1")])])])])])]),e._v(" "),v("h3",{attrs:{id:"proofop"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proofop"}},[e._v("#")]),e._v(" ProofOp")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("type")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Type of Merkle proof and how it's encoded.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("key")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Key in the Merkle tree that this proof is for.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Encoded Merkle proof for the key.")]),e._v(" "),v("td",[e._v("3")])])])])])]),e._v(" "),v("h3",{attrs:{id:"snapshot"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#snapshot"}},[e._v("#")]),e._v(" Snapshot")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("uint64")]),e._v(" "),v("td",[e._v("The height at which the snapshot was taken (after commit).")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("format")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("An application-specific snapshot format, allowing applications to version their snapshot data format and make backwards-incompatible changes. Tendermint does not interpret this.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("chunks")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("The number of chunks in the snapshot. Must be at least 1 (even if empty).")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("hash")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("An arbitrary snapshot hash. Must be equal only for identical snapshots across nodes. Tendermint does not interpret the hash, it only compares them.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("metadata")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Arbitrary application metadata, for example chunk hashes or other verification data.")]),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Used for state sync snapshots, see the "),v("RouterLink",{attrs:{to:"/spec/p2p/messages/state-sync.html"}},[e._v("state sync section")]),e._v(" for details.")],1),e._v(" "),v("li",[e._v("A snapshot is considered identical across nodes only if "),v("em",[e._v("all")]),e._v(" fields are equal (including\n"),v("code",[e._v("Metadata")]),e._v("). Chunks may be retrieved from all nodes that have the same snapshot.")]),e._v(" "),v("li",[e._v("When sent across the network, a snapshot message can be at most 4 MB.")])])])]),e._v(" "),v("h2",{attrs:{id:"data-types-introduced-or-modified-in-abci"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#data-types-introduced-or-modified-in-abci"}},[e._v("#")]),e._v(" Data types introduced or modified in ABCI++")]),e._v(" "),v("h3",{attrs:{id:"voteinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#voteinfo"}},[e._v("#")]),e._v(" VoteInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[e._v("Validator")])]),e._v(" "),v("td",[e._v("The validator that sent the vote.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("signed_last_block")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("Indicates whether or not the validator signed the last block.")]),e._v(" "),v("td",[e._v("2")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Indicates whether a validator signed the last block, allowing for rewards based on validator availability.")]),e._v(" "),v("li",[e._v("This information is typically extracted from a proposed or decided block.")])])])]),e._v(" "),v("h3",{attrs:{id:"extendedvoteinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#extendedvoteinfo"}},[e._v("#")]),e._v(" ExtendedVoteInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("validator")]),e._v(" "),v("td",[v("a",{attrs:{href:"#validator"}},[e._v("Validator")])]),e._v(" "),v("td",[e._v("The validator that sent the vote.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("signed_last_block")]),e._v(" "),v("td",[e._v("bool")]),e._v(" "),v("td",[e._v("Indicates whether or not the validator signed the last block.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("vote_extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Non-deterministic extension provided by the sending validator's Application.")]),e._v(" "),v("td",[e._v("3")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Indicates whether a validator signed the last block, allowing for rewards based on validator availability.")]),e._v(" "),v("li",[e._v("This information is extracted from Tendermint's data structures in the local process.")]),e._v(" "),v("li",[v("code",[e._v("vote_extension")]),e._v(" contains the sending validator's vote extension, which is signed by Tendermint. It can be empty")])])])]),e._v(" "),v("h3",{attrs:{id:"commitinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#commitinfo"}},[e._v("#")]),e._v(" CommitInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("round")]),e._v(" "),v("td",[e._v("int32")]),e._v(" "),v("td",[e._v("Commit round. Reflects the round at which the block proposer decided in the previous height.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("votes")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#voteinfo"}},[e._v("VoteInfo")])]),e._v(" "),v("td",[e._v("List of validators' addresses in the last validator set with their voting information.")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"extendedcommitinfo"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#extendedcommitinfo"}},[e._v("#")]),e._v(" ExtendedCommitInfo")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("round")]),e._v(" "),v("td",[e._v("int32")]),e._v(" "),v("td",[e._v("Commit round. Reflects the round at which the block proposer decided in the previous height.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("votes")]),e._v(" "),v("td",[e._v("repeated "),v("a",{attrs:{href:"#extendedvoteinfo"}},[e._v("ExtendedVoteInfo")])]),e._v(" "),v("td",[e._v("List of validators' addresses in the last validator set with their voting information, including vote extensions.")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"exectxresult"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#exectxresult"}},[e._v("#")]),e._v(" ExecTxResult")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("code")]),e._v(" "),v("td",[e._v("uint32")]),e._v(" "),v("td",[e._v("Response code.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("data")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Result bytes, if any.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("log")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("The output of the application's logger. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("info")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Additional information. "),v("strong",[e._v("May be non-deterministic.")])]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("gas_wanted")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas requested for transaction.")]),e._v(" "),v("td",[e._v("5")])]),e._v(" "),v("tr",[v("td",[e._v("gas_used")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Amount of gas consumed by transaction.")]),e._v(" "),v("td",[e._v("6")])]),e._v(" "),v("tr",[v("td",[e._v("events")]),e._v(" "),v("td",[e._v("repeated "),v("RouterLink",{attrs:{to:"/spec/abci++/abci++_basic_concepts.html#events"}},[e._v("Event")])],1),e._v(" "),v("td",[e._v("Type & Key-Value events for indexing transactions (e.g. by account).")]),e._v(" "),v("td",[e._v("7")])]),e._v(" "),v("tr",[v("td",[e._v("codespace")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("Namespace for the "),v("code",[e._v("code")]),e._v(".")]),e._v(" "),v("td",[e._v("8")])])])])])]),e._v(" "),v("h3",{attrs:{id:"txaction"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#txaction"}},[e._v("#")]),e._v(" TxAction")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ZW51bSBUeEFjdGlvbiB7CiAgVU5LTk9XTiAgICA9IDA7ICAvLyBVbmtub3duIGFjdGlvbgogIFVOTU9ESUZJRUQgPSAxOyAgLy8gVGhlIEFwcGxpY2F0aW9uIGRpZCBub3QgbW9kaWZ5IHRoaXMgdHJhbnNhY3Rpb24uCiAgQURERUQgICAgICA9IDI7ICAvLyBUaGUgQXBwbGljYXRpb24gYWRkZWQgdGhpcyB0cmFuc2FjdGlvbi4KICBSRU1PVkVEICAgID0gMzsgIC8vIFRoZSBBcHBsaWNhdGlvbiB3YW50cyB0aGlzIHRyYW5zYWN0aW9uIHJlbW92ZWQgZnJvbSB0aGUgcHJvcG9zYWwgYW5kIHRoZSBtZW1wb29sLgp9Cg=="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is "),v("code",[e._v("UNKNOWN")]),e._v(", a problem happened in the Application. Tendermint will assume the application is faulty and crash.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is "),v("code",[e._v("UNMODIFIED")]),e._v(", Tendermint includes the transaction in the proposal. Nothing to do on the mempool.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is "),v("code",[e._v("ADDED")]),e._v(", Tendermint includes the transaction in the proposal. The transaction is "),v("em",[e._v("not")]),e._v(" added to the mempool.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Action")]),e._v(" is "),v("code",[e._v("REMOVED")]),e._v(", Tendermint excludes the transaction from the proposal. The transaction is also removed from the mempool if it exists,\nsimilar to "),v("code",[e._v("CheckTx")]),e._v(" returning an error code.")])])])]),e._v(" "),v("h3",{attrs:{id:"txrecord"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#txrecord"}},[e._v("#")]),e._v(" TxRecord")]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("action")]),e._v(" "),v("td",[v("a",{attrs:{href:"#txaction"}},[e._v("TxAction")])]),e._v(" "),v("td",[e._v("What should Tendermint do with this transaction?")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("tx")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Transaction contents")]),e._v(" "),v("td",[e._v("2")])])])])])]),e._v(" "),v("h3",{attrs:{id:"proposalstatus"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#proposalstatus"}},[e._v("#")]),e._v(" ProposalStatus")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ZW51bSBQcm9wb3NhbFN0YXR1cyB7CiAgVU5LTk9XTiA9IDA7IC8vIFVua25vd24gc3RhdHVzLiBSZXR1cm5pbmcgdGhpcyBmcm9tIHRoZSBhcHBsaWNhdGlvbiBpcyBhbHdheXMgYW4gZXJyb3IuIAogIEFDQ0VQVCAgPSAxOyAvLyBTdGF0dXMgdGhhdCBzaWduYWxzIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGZpbmRzIHRoZSBwcm9wb3NhbCB2YWxpZC4KICBSRUpFQ1QgID0gMjsgLy8gU3RhdHVzIHRoYXQgc2lnbmFscyB0aGF0IHRoZSBhcHBsaWNhdGlvbiBmaW5kcyB0aGUgcHJvcG9zYWwgaW52YWxpZC4KfQo="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Used within the "),v("a",{attrs:{href:"#processproposal"}},[e._v("ProcessProposal")]),e._v(" response.\n"),v("ul",[v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("UNKNOWN")]),e._v(", a problem happened in the Application. Tendermint will assume the application is faulty and crash.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("ACCEPT")]),e._v(", Tendermint accepts the proposal and will issue a Prevote message for it.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("REJECT")]),e._v(", Tendermint rejects the proposal and will issue a Prevote for "),v("code",[e._v("nil")]),e._v(" instead.")])])])])])]),e._v(" "),v("h3",{attrs:{id:"verifystatus"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#verifystatus"}},[e._v("#")]),e._v(" VerifyStatus")]),e._v(" "),v("tm-code-block",{staticClass:"codeblock",attrs:{language:"proto",base64:"ZW51bSBWZXJpZnlTdGF0dXMgewogIFVOS05PV04gPSAwOyAvLyBVbmtub3duIHN0YXR1cy4gUmV0dXJuaW5nIHRoaXMgZnJvbSB0aGUgYXBwbGljYXRpb24gaXMgYWx3YXlzIGFuIGVycm9yLgogIEFDQ0VQVCAgPSAxOyAvLyBTdGF0dXMgdGhhdCBzaWduYWxzIHRoYXQgdGhlIGFwcGxpY2F0aW9uIGZpbmRzIHRoZSB2b3RlIGV4dGVuc2lvbiB2YWxpZC4KICBSRUpFQ1QgID0gMjsgLy8gU3RhdHVzIHRoYXQgc2lnbmFscyB0aGF0IHRoZSBhcHBsaWNhdGlvbiBmaW5kcyB0aGUgdm90ZSBleHRlbnNpb24gaW52YWxpZC4KfQo="}}),e._v(" "),v("ul",[v("li",[v("strong",[e._v("Usage")]),e._v(":\n"),v("ul",[v("li",[e._v("Used within the "),v("a",{attrs:{href:"#verifyvoteextension"}},[e._v("VerifyVoteExtension")]),e._v(" response.\n"),v("ul",[v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("UNKNOWN")]),e._v(", a problem happened in the Application. Tendermint will assume the application is faulty and crash.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("ACCEPT")]),e._v(", Tendermint will accept the vote as valid.")]),e._v(" "),v("li",[e._v("If "),v("code",[e._v("Status")]),e._v(" is "),v("code",[e._v("REJECT")]),e._v(", Tendermint will reject the vote as invalid.")])])])])])]),e._v(" "),v("h3",{attrs:{id:"canonicalvoteextension"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#canonicalvoteextension"}},[e._v("#")]),e._v(" CanonicalVoteExtension")]),e._v(" "),v("blockquote",[v("p",[v("strong",[e._v("TODO")]),e._v(": This protobuf message definition is not part of the ABCI++ interface, but rather belongs to the\nPrecommit message which is broadcast via P2P. So it is to be moved to the relevant section of the spec.")])]),e._v(" "),v("ul",[v("li",[v("p",[v("strong",[e._v("Fields")]),e._v(":")]),e._v(" "),v("table",[v("thead",[v("tr",[v("th",[e._v("Name")]),e._v(" "),v("th",[e._v("Type")]),e._v(" "),v("th",[e._v("Description")]),e._v(" "),v("th",[e._v("Field Number")])])]),e._v(" "),v("tbody",[v("tr",[v("td",[e._v("extension")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[e._v("Vote extension provided by the Application.")]),e._v(" "),v("td",[e._v("1")])]),e._v(" "),v("tr",[v("td",[e._v("height")]),e._v(" "),v("td",[e._v("int64")]),e._v(" "),v("td",[e._v("Height in which the extension was provided.")]),e._v(" "),v("td",[e._v("2")])]),e._v(" "),v("tr",[v("td",[e._v("round")]),e._v(" "),v("td",[e._v("int32")]),e._v(" "),v("td",[e._v("Round in which the extension was provided.")]),e._v(" "),v("td",[e._v("3")])]),e._v(" "),v("tr",[v("td",[e._v("chain_id")]),e._v(" "),v("td",[e._v("string")]),e._v(" "),v("td",[e._v("ID of the blockchain running consensus.")]),e._v(" "),v("td",[e._v("4")])]),e._v(" "),v("tr",[v("td",[e._v("address")]),e._v(" "),v("td",[e._v("bytes")]),e._v(" "),v("td",[v("RouterLink",{attrs:{to:"/spec/core/data_structures.html#address"}},[e._v("Address")]),e._v(" of the validator that provided the extension")],1),e._v(" "),v("td",[e._v("5")])])])])]),e._v(" "),v("li",[v("p",[v("strong",[e._v("Usage")]),e._v(":")]),e._v(" "),v("ul",[v("li",[e._v("Tendermint is to sign the whole data structure and attach it to a Precommit message")]),e._v(" "),v("li",[e._v("Upon reception, Tendermint validates the sender's signature and sanity-checks the values of "),v("code",[e._v("height")]),e._v(", "),v("code",[e._v("round")]),e._v(", and "),v("code",[e._v("chain_id")]),e._v(".\nThen it sends "),v("code",[e._v("extension")]),e._v(" to the Application via "),v("code",[e._v("RequestVerifyVoteExtension")]),e._v(" for verification.")])])])])],1)}),[],!1,null,null,null);t.default=a.exports}}]);